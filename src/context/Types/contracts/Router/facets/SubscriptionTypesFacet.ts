/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type SubscriptionStructStruct = {
  price: PromiseOrValue<BigNumberish>;
  isActive: PromiseOrValue<boolean>;
  name: PromiseOrValue<string>;
};

export type SubscriptionStructStructOutput = [BigNumber, boolean, string] & {
  price: BigNumber;
  isActive: boolean;
  name: string;
};

export type SubscriptionManagerStructStruct = {
  id: PromiseOrValue<BigNumberish>;
  _address: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  tokenAddress: PromiseOrValue<string>;
  tokenSymbol: PromiseOrValue<string>;
  tokenDecimals: PromiseOrValue<BigNumberish>;
  activeSubscriptionCount: PromiseOrValue<BigNumberish>;
  treasury: PromiseOrValue<string>;
  subscriptions: SubscriptionStructStruct[];
  owners: PromiseOrValue<string>[];
  subscriptionDuration: PromiseOrValue<BigNumberish>;
  referralPercent: PromiseOrValue<BigNumberish>;
};

export type SubscriptionManagerStructStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  SubscriptionStructStructOutput[],
  string[],
  BigNumber,
  number
] & {
  id: BigNumber;
  _address: string;
  name: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenDecimals: BigNumber;
  activeSubscriptionCount: BigNumber;
  treasury: string;
  subscriptions: SubscriptionStructStructOutput[];
  owners: string[];
  subscriptionDuration: BigNumber;
  referralPercent: number;
};

export type MinimifiedSubscriptionManagerStructStruct = {
  id: PromiseOrValue<BigNumberish>;
  name: PromiseOrValue<string>;
  tokenSymbol: PromiseOrValue<string>;
  activeSubscriptionCount: PromiseOrValue<BigNumberish>;
};

export type MinimifiedSubscriptionManagerStructStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber
] & {
  id: BigNumber;
  name: string;
  tokenSymbol: string;
  activeSubscriptionCount: BigNumber;
};

export interface SubscriptionTypesFacetInterface extends utils.Interface {
  functions: {
    "editSubscription(uint256,uint8,uint256,string,bool)": FunctionFragment;
    "getActiveSubscriptionCount(uint256)": FunctionFragment;
    "getSubscriptionManager(uint256)": FunctionFragment;
    "getSubscriptions(uint256)": FunctionFragment;
    "getSubscriptionsManager(address)": FunctionFragment;
    "getUserSubscriptionStatus(uint256,address)": FunctionFragment;
    "newSubscription(uint256,uint256,string)": FunctionFragment;
    "subscriptions(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "editSubscription"
      | "getActiveSubscriptionCount"
      | "getSubscriptionManager"
      | "getSubscriptions"
      | "getSubscriptionsManager"
      | "getUserSubscriptionStatus"
      | "newSubscription"
      | "subscriptions"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "editSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptionCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionManager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionsManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserSubscriptionStatus",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "newSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "editSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserSubscriptionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;

  events: {
    "SubscriptionEdited(uint256,address,uint8,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SubscriptionEdited"): EventFragment;
}

export interface SubscriptionEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  price: BigNumber;
  isActive: boolean;
}
export type SubscriptionEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, boolean],
  SubscriptionEditedEventObject
>;

export type SubscriptionEditedEventFilter =
  TypedEventFilter<SubscriptionEditedEvent>;

export interface SubscriptionTypesFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionTypesFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SubscriptionManagerStructStructOutput]>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SubscriptionStructStructOutput[]]>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MinimifiedSubscriptionManagerStructStructOutput[]]>;

    getUserSubscriptionStatus(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { subscriptionId: number; isActive: boolean }
    >;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SubscriptionStructStructOutput]>;
  };

  editSubscription(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getActiveSubscriptionCount(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionManager(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SubscriptionManagerStructStructOutput>;

  getSubscriptions(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SubscriptionStructStructOutput[]>;

  getSubscriptionsManager(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MinimifiedSubscriptionManagerStructStructOutput[]>;

  getUserSubscriptionStatus(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, boolean] & { subscriptionId: number; isActive: boolean }>;

  newSubscription(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SubscriptionStructStructOutput>;

  callStatic: {
    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SubscriptionManagerStructStructOutput>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SubscriptionStructStructOutput[]>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MinimifiedSubscriptionManagerStructStructOutput[]>;

    getUserSubscriptionStatus(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [number, boolean] & { subscriptionId: number; isActive: boolean }
    >;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SubscriptionStructStructOutput>;
  };

  filters: {
    "SubscriptionEdited(uint256,address,uint8,uint256,bool)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;
    SubscriptionEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;
  };

  estimateGas: {
    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserSubscriptionStatus(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserSubscriptionStatus(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
