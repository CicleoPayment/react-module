/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type SwapDescriptionStruct = {
  srcToken: PromiseOrValue<string>;
  dstToken: PromiseOrValue<string>;
  srcReceiver: PromiseOrValue<string>;
  dstReceiver: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  minReturnAmount: PromiseOrValue<BigNumberish>;
  guaranteedAmount: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
  referrer: PromiseOrValue<string>;
  permit: PromiseOrValue<BytesLike>;
};

export type SwapDescriptionStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  srcToken: string;
  dstToken: string;
  srcReceiver: string;
  dstReceiver: string;
  amount: BigNumber;
  minReturnAmount: BigNumber;
  guaranteedAmount: BigNumber;
  flags: BigNumber;
  referrer: string;
  permit: string;
};

export declare namespace IOpenOceanCaller {
  export type CallDescriptionStruct = {
    target: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CallDescriptionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    target: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    data: string;
  };
}

export interface PaymentFacetInterface extends utils.Interface {
  functions: {
    "getChangeSubscriptionPrice(uint256,address,uint8)": FunctionFragment;
    "setBotAccount(address)": FunctionFragment;
    "setBridgeExectuor(address)": FunctionFragment;
    "setReferralPercent(uint256,uint16)": FunctionFragment;
    "setTax(address)": FunctionFragment;
    "setTaxRate(uint16)": FunctionFragment;
    "subscribe(uint256,uint8,address)": FunctionFragment;
    "subscribeDynamicly(uint256,string,uint256,address)": FunctionFragment;
    "subscribeDynamiclyWithSwap(uint256,string,uint256,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscribeWithSwap(uint256,uint8,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscriptionRenew(uint256,address)": FunctionFragment;
    "subscriptionRenewWithSwap(uint256,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "taxAccount()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getChangeSubscriptionPrice"
      | "setBotAccount"
      | "setBridgeExectuor"
      | "setReferralPercent"
      | "setTax"
      | "setTaxRate"
      | "subscribe"
      | "subscribeDynamicly"
      | "subscribeDynamiclyWithSwap"
      | "subscribeWithSwap"
      | "subscriptionRenew"
      | "subscriptionRenewWithSwap"
      | "taxAccount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChangeSubscriptionPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setBotAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeExectuor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralPercent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeDynamicly",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeDynamiclyWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenew",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenewWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "taxAccount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getChangeSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBotAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeExectuor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setReferralPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeDynamicly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeDynamiclyWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenewWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxAccount", data: BytesLike): Result;

  events: {
    "PaymentSubscription(uint256,address,uint8,uint256)": EventFragment;
    "ReferralPercentEdited(uint256,address,uint16)": EventFragment;
    "SelectBlockchain(uint256,address,uint256)": EventFragment;
    "SelectToken(uint256,address,address)": EventFragment;
    "UserEdited(uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralPercentEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectBlockchain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEdited"): EventFragment;
}

export interface PaymentSubscriptionEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  price: BigNumber;
}
export type PaymentSubscriptionEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  PaymentSubscriptionEventObject
>;

export type PaymentSubscriptionEventFilter =
  TypedEventFilter<PaymentSubscriptionEvent>;

export interface ReferralPercentEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  percent: number;
}
export type ReferralPercentEditedEvent = TypedEvent<
  [BigNumber, string, number],
  ReferralPercentEditedEventObject
>;

export type ReferralPercentEditedEventFilter =
  TypedEventFilter<ReferralPercentEditedEvent>;

export interface SelectBlockchainEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  paymentBlockchainId: BigNumber;
}
export type SelectBlockchainEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SelectBlockchainEventObject
>;

export type SelectBlockchainEventFilter =
  TypedEventFilter<SelectBlockchainEvent>;

export interface SelectTokenEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  tokenAddress: string;
}
export type SelectTokenEvent = TypedEvent<
  [BigNumber, string, string],
  SelectTokenEventObject
>;

export type SelectTokenEventFilter = TypedEventFilter<SelectTokenEvent>;

export interface UserEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  endDate: BigNumber;
}
export type UserEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  UserEditedEventObject
>;

export type UserEditedEventFilter = TypedEventFilter<UserEditedEvent>;

export interface PaymentFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    taxAccount(overrides?: CallOverrides): Promise<[string]>;
  };

  getChangeSubscriptionPrice(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    newSubscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBotAccount(
    _botAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeExectuor(
    _bridgeExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralPercent(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    referralTaxPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTax(
    _tax: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    _taxPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeDynamicly(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeDynamiclyWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionRenew(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionRenewWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  taxAccount(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    taxAccount(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "PaymentSubscription(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;
    PaymentSubscription(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;

    "ReferralPercentEdited(uint256,address,uint16)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      percent?: null
    ): ReferralPercentEditedEventFilter;
    ReferralPercentEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      percent?: null
    ): ReferralPercentEditedEventFilter;

    "SelectBlockchain(uint256,address,uint256)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentBlockchainId?: PromiseOrValue<BigNumberish> | null
    ): SelectBlockchainEventFilter;
    SelectBlockchain(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentBlockchainId?: PromiseOrValue<BigNumberish> | null
    ): SelectBlockchainEventFilter;

    "SelectToken(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;
    SelectToken(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;

    "UserEdited(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
    UserEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
  };

  estimateGas: {
    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    taxAccount(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    taxAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
