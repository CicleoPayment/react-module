/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export interface AdminFacetInterface extends utils.Interface {
  functions: {
    "editAccount(uint256,address,uint256,uint8)": FunctionFragment;
    "owner()": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setName(uint256,string)": FunctionFragment;
    "setToken(uint256,address)": FunctionFragment;
    "setTreasury(uint256,address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyIfOwner(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "editAccount"
      | "owner"
      | "setFactory"
      | "setName"
      | "setToken"
      | "setTreasury"
      | "transferOwnership"
      | "verifyIfOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "editAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyIfOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "editAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyIfOwner",
    data: BytesLike
  ): Result;

  events: {
    "NameEdited(uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TokenEdited(uint256,address,address)": EventFragment;
    "TreasuryEdited(uint256,address,address)": EventFragment;
    "UserEdited(uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEdited"): EventFragment;
}

export interface NameEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  newName: string;
}
export type NameEditedEvent = TypedEvent<
  [BigNumber, string, string],
  NameEditedEventObject
>;

export type NameEditedEventFilter = TypedEventFilter<NameEditedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TokenEditedEventObject {
  SubscriptionManagerId: BigNumber;
  token: string;
  newTreasury: string;
}
export type TokenEditedEvent = TypedEvent<
  [BigNumber, string, string],
  TokenEditedEventObject
>;

export type TokenEditedEventFilter = TypedEventFilter<TokenEditedEvent>;

export interface TreasuryEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  newTreasury: string;
}
export type TreasuryEditedEvent = TypedEvent<
  [BigNumber, string, string],
  TreasuryEditedEventObject
>;

export type TreasuryEditedEventFilter = TypedEventFilter<TreasuryEditedEvent>;

export interface UserEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  endDate: BigNumber;
}
export type UserEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  UserEditedEventObject
>;

export type UserEditedEventFilter = TypedEventFilter<UserEditedEvent>;

export interface AdminFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AdminFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string] & { owner_: string }>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  editAccount(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    subscriptionEndDate: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    _newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyIfOwner(
    user: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "NameEdited(uint256,address,string)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;
    NameEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TokenEdited(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TokenEditedEventFilter;
    TokenEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TokenEditedEventFilter;

    "TreasuryEdited(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;
    TreasuryEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;

    "UserEdited(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
    UserEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
  };

  estimateGas: {
    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      _newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
