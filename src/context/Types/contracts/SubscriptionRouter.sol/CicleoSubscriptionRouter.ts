/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SwapDescriptionStruct = {
  srcToken: PromiseOrValue<string>;
  dstToken: PromiseOrValue<string>;
  srcReceiver: PromiseOrValue<string>;
  dstReceiver: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  minReturnAmount: PromiseOrValue<BigNumberish>;
  guaranteedAmount: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
  referrer: PromiseOrValue<string>;
  permit: PromiseOrValue<BytesLike>;
};

export type SwapDescriptionStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  srcToken: string;
  dstToken: string;
  srcReceiver: string;
  dstReceiver: string;
  amount: BigNumber;
  minReturnAmount: BigNumber;
  guaranteedAmount: BigNumber;
  flags: BigNumber;
  referrer: string;
  permit: string;
};

export type SubscriptionStructStruct = {
  price: PromiseOrValue<BigNumberish>;
  isActive: PromiseOrValue<boolean>;
  name: PromiseOrValue<string>;
};

export type SubscriptionStructStructOutput = [BigNumber, boolean, string] & {
  price: BigNumber;
  isActive: boolean;
  name: string;
};

export type SubscriptionManagerStructStruct = {
  id: PromiseOrValue<BigNumberish>;
  _address: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
  tokenAddress: PromiseOrValue<string>;
  tokenSymbol: PromiseOrValue<string>;
  tokenDecimals: PromiseOrValue<BigNumberish>;
  activeSubscriptionCount: PromiseOrValue<BigNumberish>;
  treasury: PromiseOrValue<string>;
  subscriptions: SubscriptionStructStruct[];
  owners: PromiseOrValue<string>[];
  subscriptionDuration: PromiseOrValue<BigNumberish>;
};

export type SubscriptionManagerStructStructOutput = [
  BigNumber,
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  string,
  SubscriptionStructStructOutput[],
  string[],
  BigNumber
] & {
  id: BigNumber;
  _address: string;
  name: string;
  tokenAddress: string;
  tokenSymbol: string;
  tokenDecimals: BigNumber;
  activeSubscriptionCount: BigNumber;
  treasury: string;
  subscriptions: SubscriptionStructStructOutput[];
  owners: string[];
  subscriptionDuration: BigNumber;
};

export type MinimifiedSubscriptionManagerStructStruct = {
  id: PromiseOrValue<BigNumberish>;
  name: PromiseOrValue<string>;
  tokenSymbol: PromiseOrValue<string>;
  activeSubscriptionCount: PromiseOrValue<BigNumberish>;
};

export type MinimifiedSubscriptionManagerStructStructOutput = [
  BigNumber,
  string,
  string,
  BigNumber
] & {
  id: BigNumber;
  name: string;
  tokenSymbol: string;
  activeSubscriptionCount: BigNumber;
};

export declare namespace IOpenOceanCaller {
  export type CallDescriptionStruct = {
    target: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CallDescriptionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    target: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    data: string;
  };
}

export interface CicleoSubscriptionRouterInterface extends utils.Interface {
  functions: {
    "botAccount()": FunctionFragment;
    "bridgeExecutor()": FunctionFragment;
    "changeSubscription(uint256,uint8)": FunctionFragment;
    "changeSubscriptionWithSwap(uint256,uint8,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "editAccount(uint256,address,uint256,uint8)": FunctionFragment;
    "editSubscription(uint256,uint8,uint256,string,bool)": FunctionFragment;
    "factory()": FunctionFragment;
    "getActiveSubscriptionCount(uint256)": FunctionFragment;
    "getChangeSubscriptionPrice(uint256,address,uint8)": FunctionFragment;
    "getSubscriptionManager(uint256)": FunctionFragment;
    "getSubscriptions(uint256)": FunctionFragment;
    "getSubscriptionsManager(address)": FunctionFragment;
    "initialize(address,address,uint16,address)": FunctionFragment;
    "newSubscription(uint256,uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "referralPercent(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "security()": FunctionFragment;
    "setBotAccount(address)": FunctionFragment;
    "setBridgeExectuor(address)": FunctionFragment;
    "setFactory(address)": FunctionFragment;
    "setName(uint256,string)": FunctionFragment;
    "setReferralPercent(uint256,uint16)": FunctionFragment;
    "setSecurity(address)": FunctionFragment;
    "setTax(address)": FunctionFragment;
    "setTaxRate(uint16)": FunctionFragment;
    "setToken(uint256,address)": FunctionFragment;
    "setTreasury(uint256,address)": FunctionFragment;
    "subscribe(uint256,uint8,address)": FunctionFragment;
    "subscribeDynamicly(uint256,string,uint256,address)": FunctionFragment;
    "subscribeDynamiclyWithSwap(uint256,string,uint256,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscribeWithSwap(uint256,uint8,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscriptionNumber(uint256)": FunctionFragment;
    "subscriptionRenew(uint256,address)": FunctionFragment;
    "subscriptionRenewWithSwap(uint256,address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscriptions(uint256,uint256)": FunctionFragment;
    "taxAccount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userReferral(uint256,address)": FunctionFragment;
    "users(uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "botAccount"
      | "bridgeExecutor"
      | "changeSubscription"
      | "changeSubscriptionWithSwap"
      | "editAccount"
      | "editSubscription"
      | "factory"
      | "getActiveSubscriptionCount"
      | "getChangeSubscriptionPrice"
      | "getSubscriptionManager"
      | "getSubscriptions"
      | "getSubscriptionsManager"
      | "initialize"
      | "newSubscription"
      | "owner"
      | "referralPercent"
      | "renounceOwnership"
      | "security"
      | "setBotAccount"
      | "setBridgeExectuor"
      | "setFactory"
      | "setName"
      | "setReferralPercent"
      | "setSecurity"
      | "setTax"
      | "setTaxRate"
      | "setToken"
      | "setTreasury"
      | "subscribe"
      | "subscribeDynamicly"
      | "subscribeDynamiclyWithSwap"
      | "subscribeWithSwap"
      | "subscriptionNumber"
      | "subscriptionRenew"
      | "subscriptionRenewWithSwap"
      | "subscriptions"
      | "taxAccount"
      | "transferOwnership"
      | "userReferral"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "botAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeExecutor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSubscriptionWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editAccount",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptionCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChangeSubscriptionPrice",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionManager",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionsManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "newSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "referralPercent",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "security", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBotAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBridgeExectuor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setReferralPercent",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurity",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTax",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeDynamicly",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeDynamiclyWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscribeWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionNumber",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenew",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenewWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userReferral",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "botAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bridgeExecutor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSubscriptionWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getChangeSubscriptionPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "referralPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "security", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBotAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBridgeExectuor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setReferralPercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTax", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "subscribe", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "subscribeDynamicly",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeDynamiclyWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscribeWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenewWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userReferral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "NameEdited(uint256,address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "PaymentSubscription(uint256,address,uint8,uint256)": EventFragment;
    "ReferralPercentEdited(uint256,address,uint16)": EventFragment;
    "SelectToken(uint256,address,address)": EventFragment;
    "SubscriptionEdited(uint256,address,uint8,uint256,bool)": EventFragment;
    "TokenEdited(uint256,address,address)": EventFragment;
    "TreasuryEdited(uint256,address,address)": EventFragment;
    "UserEdited(uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReferralPercentEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEdited"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface NameEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  newName: string;
}
export type NameEditedEvent = TypedEvent<
  [BigNumber, string, string],
  NameEditedEventObject
>;

export type NameEditedEventFilter = TypedEventFilter<NameEditedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentSubscriptionEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  price: BigNumber;
}
export type PaymentSubscriptionEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  PaymentSubscriptionEventObject
>;

export type PaymentSubscriptionEventFilter =
  TypedEventFilter<PaymentSubscriptionEvent>;

export interface ReferralPercentEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  percent: number;
}
export type ReferralPercentEditedEvent = TypedEvent<
  [BigNumber, string, number],
  ReferralPercentEditedEventObject
>;

export type ReferralPercentEditedEventFilter =
  TypedEventFilter<ReferralPercentEditedEvent>;

export interface SelectTokenEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  tokenAddress: string;
}
export type SelectTokenEvent = TypedEvent<
  [BigNumber, string, string],
  SelectTokenEventObject
>;

export type SelectTokenEventFilter = TypedEventFilter<SelectTokenEvent>;

export interface SubscriptionEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  price: BigNumber;
  isActive: boolean;
}
export type SubscriptionEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber, boolean],
  SubscriptionEditedEventObject
>;

export type SubscriptionEditedEventFilter =
  TypedEventFilter<SubscriptionEditedEvent>;

export interface TokenEditedEventObject {
  SubscriptionManagerId: BigNumber;
  token: string;
  newTreasury: string;
}
export type TokenEditedEvent = TypedEvent<
  [BigNumber, string, string],
  TokenEditedEventObject
>;

export type TokenEditedEventFilter = TypedEventFilter<TokenEditedEvent>;

export interface TreasuryEditedEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  newTreasury: string;
}
export type TreasuryEditedEvent = TypedEvent<
  [BigNumber, string, string],
  TreasuryEditedEventObject
>;

export type TreasuryEditedEventFilter = TypedEventFilter<TreasuryEditedEvent>;

export interface UserEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  endDate: BigNumber;
}
export type UserEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  UserEditedEventObject
>;

export type UserEditedEventFilter = TypedEventFilter<UserEditedEvent>;

export interface CicleoSubscriptionRouter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CicleoSubscriptionRouterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    botAccount(overrides?: CallOverrides): Promise<[string]>;

    bridgeExecutor(overrides?: CallOverrides): Promise<[string]>;

    changeSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    changeSubscriptionWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SubscriptionManagerStructStructOutput]>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[SubscriptionStructStructOutput[]]>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[MinimifiedSubscriptionManagerStructStructOutput[]]>;

    initialize(
      _factory: PromiseOrValue<string>,
      _taxAccount: PromiseOrValue<string>,
      _taxPercentage: PromiseOrValue<BigNumberish>,
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    referralPercent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    security(overrides?: CallOverrides): Promise<[string]>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecurity(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    taxAccount(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userReferral(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; price: BigNumber }>;
  };

  botAccount(overrides?: CallOverrides): Promise<string>;

  bridgeExecutor(overrides?: CallOverrides): Promise<string>;

  changeSubscription(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    newSubscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  changeSubscriptionWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    newSubscriptionId: PromiseOrValue<BigNumberish>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editAccount(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    subscriptionEndDate: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editSubscription(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    id: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getActiveSubscriptionCount(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getChangeSubscriptionPrice(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    newSubscriptionId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSubscriptionManager(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SubscriptionManagerStructStructOutput>;

  getSubscriptions(
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<SubscriptionStructStructOutput[]>;

  getSubscriptionsManager(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<MinimifiedSubscriptionManagerStructStructOutput[]>;

  initialize(
    _factory: PromiseOrValue<string>,
    _taxAccount: PromiseOrValue<string>,
    _taxPercentage: PromiseOrValue<BigNumberish>,
    _botAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  newSubscription(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  referralPercent(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  security(overrides?: CallOverrides): Promise<string>;

  setBotAccount(
    _botAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBridgeExectuor(
    _bridgeExecutor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setReferralPercent(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    referralTaxPercent: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecurity(
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTax(
    _tax: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    _taxPercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribe(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeDynamicly(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeDynamiclyWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscribeWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    referral: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionNumber(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<number>;

  subscriptionRenew(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionRenewWithSwap(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string] & {
      price: BigNumber;
      isActive: boolean;
      name: string;
    }
  >;

  taxAccount(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userReferral(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  users(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, BigNumber] & { name: string; price: BigNumber }>;

  callStatic: {
    botAccount(overrides?: CallOverrides): Promise<string>;

    bridgeExecutor(overrides?: CallOverrides): Promise<string>;

    changeSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSubscriptionWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SubscriptionManagerStructStructOutput>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<SubscriptionStructStructOutput[]>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<MinimifiedSubscriptionManagerStructStructOutput[]>;

    initialize(
      _factory: PromiseOrValue<string>,
      _taxAccount: PromiseOrValue<string>,
      _taxPercentage: PromiseOrValue<BigNumberish>,
      _botAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    referralPercent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    security(overrides?: CallOverrides): Promise<string>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecurity(
      _security: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<number>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    taxAccount(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    userReferral(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, BigNumber] & { name: string; price: BigNumber }>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "NameEdited(uint256,address,string)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;
    NameEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "PaymentSubscription(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;
    PaymentSubscription(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;

    "ReferralPercentEdited(uint256,address,uint16)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      percent?: null
    ): ReferralPercentEditedEventFilter;
    ReferralPercentEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      percent?: null
    ): ReferralPercentEditedEventFilter;

    "SelectToken(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;
    SelectToken(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;

    "SubscriptionEdited(uint256,address,uint8,uint256,bool)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;
    SubscriptionEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;

    "TokenEdited(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TokenEditedEventFilter;
    TokenEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      token?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TokenEditedEventFilter;

    "TreasuryEdited(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;
    TreasuryEdited(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;

    "UserEdited(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
    UserEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
  };

  estimateGas: {
    botAccount(overrides?: CallOverrides): Promise<BigNumber>;

    bridgeExecutor(overrides?: CallOverrides): Promise<BigNumber>;

    changeSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    changeSubscriptionWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _factory: PromiseOrValue<string>,
      _taxAccount: PromiseOrValue<string>,
      _taxPercentage: PromiseOrValue<BigNumberish>,
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    referralPercent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    security(overrides?: CallOverrides): Promise<BigNumber>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecurity(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxAccount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userReferral(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    botAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bridgeExecutor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    changeSubscriptionWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editAccount(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      id: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveSubscriptionCount(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getChangeSubscriptionPrice(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      newSubscriptionId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionManager(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptions(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionsManager(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _factory: PromiseOrValue<string>,
      _taxAccount: PromiseOrValue<string>,
      _taxPercentage: PromiseOrValue<BigNumberish>,
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    newSubscription(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    referralPercent(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    security(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBotAccount(
      _botAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBridgeExectuor(
      _bridgeExecutor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setReferralPercent(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      referralTaxPercent: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecurity(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTax(
      _tax: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      _taxPercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribe(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeDynamicly(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeDynamiclyWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscribeWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      referral: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionNumber(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionRenewWithSwap(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userReferral(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
