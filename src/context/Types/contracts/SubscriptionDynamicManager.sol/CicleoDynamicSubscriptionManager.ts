/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type SwapDescriptionStruct = {
  srcToken: PromiseOrValue<string>;
  dstToken: PromiseOrValue<string>;
  srcReceiver: PromiseOrValue<string>;
  dstReceiver: PromiseOrValue<string>;
  amount: PromiseOrValue<BigNumberish>;
  minReturnAmount: PromiseOrValue<BigNumberish>;
  guaranteedAmount: PromiseOrValue<BigNumberish>;
  flags: PromiseOrValue<BigNumberish>;
  referrer: PromiseOrValue<string>;
  permit: PromiseOrValue<BytesLike>;
};

export type SwapDescriptionStructOutput = [
  string,
  string,
  string,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  string
] & {
  srcToken: string;
  dstToken: string;
  srcReceiver: string;
  dstReceiver: string;
  amount: BigNumber;
  minReturnAmount: BigNumber;
  guaranteedAmount: BigNumber;
  flags: BigNumber;
  referrer: string;
  permit: string;
};

export declare namespace IOpenOceanCaller {
  export type CallDescriptionStruct = {
    target: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CallDescriptionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    target: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    data: string;
  };
}

export interface CicleoDynamicSubscriptionManagerInterface
  extends utils.Interface {
  functions: {
    "approveSubscription(uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "deleteSubManager()": FunctionFragment;
    "editAccount(address,uint256,uint256,string)": FunctionFragment;
    "enabled()": FunctionFragment;
    "factory()": FunctionFragment;
    "getSubscriptionName(address)": FunctionFragment;
    "getSubscriptionStatus(address)": FunctionFragment;
    "name()": FunctionFragment;
    "paymentDynnamic(uint256,string)": FunctionFragment;
    "paymentDynnamicWithSwap(uint256,string,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "router()": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "subscriptionNumber()": FunctionFragment;
    "subscriptionRenew(address)": FunctionFragment;
    "subscriptionRenewWithSwap(address,address,(address,address,address,address,uint256,uint256,uint256,uint256,address,bytes),(uint256,uint256,uint256,bytes)[])": FunctionFragment;
    "subscriptions(uint256)": FunctionFragment;
    "timerange()": FunctionFragment;
    "token()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "tokenDecimals()": FunctionFragment;
    "tokenSymbol()": FunctionFragment;
    "treasury()": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveSubscription"
      | "cancel"
      | "deleteSubManager"
      | "editAccount"
      | "enabled"
      | "factory"
      | "getSubscriptionName"
      | "getSubscriptionStatus"
      | "name"
      | "paymentDynnamic"
      | "paymentDynnamicWithSwap"
      | "router"
      | "setName"
      | "setTreasury"
      | "subscriptionNumber"
      | "subscriptionRenew"
      | "subscriptionRenewWithSwap"
      | "subscriptions"
      | "timerange"
      | "token"
      | "tokenAddress"
      | "tokenDecimals"
      | "tokenSymbol"
      | "treasury"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deleteSubManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editAccount",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "enabled", values?: undefined): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "paymentDynnamic",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "paymentDynnamicWithSwap",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenew",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenewWithSwap",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      SwapDescriptionStruct,
      IOpenOceanCaller.CallDescriptionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "timerange", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenSymbol",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deleteSubManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "paymentDynnamic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "paymentDynnamicWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenewWithSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "timerange", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenSymbol",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "ApproveDynamicSubscription(address,uint256)": EventFragment;
    "Cancel(address)": EventFragment;
    "NameEdited(address,string)": EventFragment;
    "PaymentDynamicSubscription(address,string,uint256)": EventFragment;
    "SelectToken(address,address)": EventFragment;
    "ToggleSubscriptionManager(bool)": EventFragment;
    "TreasuryEdited(address,address)": EventFragment;
    "UserDynamicEdited(address,string,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveDynamicSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentDynamicSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ToggleSubscriptionManager"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserDynamicEdited"): EventFragment;
}

export interface ApproveDynamicSubscriptionEventObject {
  user: string;
  amount: BigNumber;
}
export type ApproveDynamicSubscriptionEvent = TypedEvent<
  [string, BigNumber],
  ApproveDynamicSubscriptionEventObject
>;

export type ApproveDynamicSubscriptionEventFilter =
  TypedEventFilter<ApproveDynamicSubscriptionEvent>;

export interface CancelEventObject {
  user: string;
}
export type CancelEvent = TypedEvent<[string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface NameEditedEventObject {
  user: string;
  newName: string;
}
export type NameEditedEvent = TypedEvent<
  [string, string],
  NameEditedEventObject
>;

export type NameEditedEventFilter = TypedEventFilter<NameEditedEvent>;

export interface PaymentDynamicSubscriptionEventObject {
  user: string;
  subscrptionName: string;
  price: BigNumber;
}
export type PaymentDynamicSubscriptionEvent = TypedEvent<
  [string, string, BigNumber],
  PaymentDynamicSubscriptionEventObject
>;

export type PaymentDynamicSubscriptionEventFilter =
  TypedEventFilter<PaymentDynamicSubscriptionEvent>;

export interface SelectTokenEventObject {
  user: string;
  tokenAddress: string;
}
export type SelectTokenEvent = TypedEvent<
  [string, string],
  SelectTokenEventObject
>;

export type SelectTokenEventFilter = TypedEventFilter<SelectTokenEvent>;

export interface ToggleSubscriptionManagerEventObject {
  enabled: boolean;
}
export type ToggleSubscriptionManagerEvent = TypedEvent<
  [boolean],
  ToggleSubscriptionManagerEventObject
>;

export type ToggleSubscriptionManagerEventFilter =
  TypedEventFilter<ToggleSubscriptionManagerEvent>;

export interface TreasuryEditedEventObject {
  user: string;
  newTreasury: string;
}
export type TreasuryEditedEvent = TypedEvent<
  [string, string],
  TreasuryEditedEventObject
>;

export type TreasuryEditedEventFilter = TypedEventFilter<TreasuryEditedEvent>;

export interface UserDynamicEditedEventObject {
  user: string;
  subscrptionName: string;
  price: BigNumber;
  endDate: BigNumber;
}
export type UserDynamicEditedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  UserDynamicEditedEventObject
>;

export type UserDynamicEditedEventFilter =
  TypedEventFilter<UserDynamicEditedEvent>;

export interface CicleoDynamicSubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CicleoDynamicSubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveSubscription(
      amountMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteSubManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editAccount(
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionPrice: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enabled(overrides?: CallOverrides): Promise<[boolean]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getSubscriptionName(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { subName: string }>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        subscriptionPrice: BigNumber;
        subscriptionName: string;
        isActive: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<[string]>;

    paymentDynnamic(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paymentDynnamicWithSwap(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionRenewWithSwap(
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    timerange(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    tokenDecimals(overrides?: CallOverrides): Promise<[number]>;

    tokenSymbol(overrides?: CallOverrides): Promise<[string]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, string, BigNumber] & {
        subscriptionEndDate: BigNumber;
        approval: BigNumber;
        lastPayment: BigNumber;
        canceled: boolean;
        subscriptionName: string;
        subscriptionPrice: BigNumber;
      }
    >;
  };

  approveSubscription(
    amountMax: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteSubManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editAccount(
    user: PromiseOrValue<string>,
    subscriptionEndDate: PromiseOrValue<BigNumberish>,
    subscriptionPrice: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enabled(overrides?: CallOverrides): Promise<boolean>;

  factory(overrides?: CallOverrides): Promise<string>;

  getSubscriptionName(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSubscriptionStatus(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, boolean] & {
      subscriptionPrice: BigNumber;
      subscriptionName: string;
      isActive: boolean;
    }
  >;

  name(overrides?: CallOverrides): Promise<string>;

  paymentDynnamic(
    price: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paymentDynnamicWithSwap(
    price: PromiseOrValue<BigNumberish>,
    subscriptionName: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  setName(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

  subscriptionRenew(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionRenewWithSwap(
    user: PromiseOrValue<string>,
    executor: PromiseOrValue<string>,
    desc: SwapDescriptionStruct,
    calls: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string] & {
      price: BigNumber;
      isActive: boolean;
      name: string;
    }
  >;

  timerange(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  tokenDecimals(overrides?: CallOverrides): Promise<number>;

  tokenSymbol(overrides?: CallOverrides): Promise<string>;

  treasury(overrides?: CallOverrides): Promise<string>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean, string, BigNumber] & {
      subscriptionEndDate: BigNumber;
      approval: BigNumber;
      lastPayment: BigNumber;
      canceled: boolean;
      subscriptionName: string;
      subscriptionPrice: BigNumber;
    }
  >;

  callStatic: {
    approveSubscription(
      amountMax: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    deleteSubManager(overrides?: CallOverrides): Promise<void>;

    editAccount(
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionPrice: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enabled(overrides?: CallOverrides): Promise<boolean>;

    factory(overrides?: CallOverrides): Promise<string>;

    getSubscriptionName(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, boolean] & {
        subscriptionPrice: BigNumber;
        subscriptionName: string;
        isActive: boolean;
      }
    >;

    name(overrides?: CallOverrides): Promise<string>;

    paymentDynnamic(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    paymentDynnamicWithSwap(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionRenewWithSwap(
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    timerange(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    tokenDecimals(overrides?: CallOverrides): Promise<number>;

    tokenSymbol(overrides?: CallOverrides): Promise<string>;

    treasury(overrides?: CallOverrides): Promise<string>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean, string, BigNumber] & {
        subscriptionEndDate: BigNumber;
        approval: BigNumber;
        lastPayment: BigNumber;
        canceled: boolean;
        subscriptionName: string;
        subscriptionPrice: BigNumber;
      }
    >;
  };

  filters: {
    "ApproveDynamicSubscription(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ApproveDynamicSubscriptionEventFilter;
    ApproveDynamicSubscription(
      user?: PromiseOrValue<string> | null,
      amount?: null
    ): ApproveDynamicSubscriptionEventFilter;

    "Cancel(address)"(user?: PromiseOrValue<string> | null): CancelEventFilter;
    Cancel(user?: PromiseOrValue<string> | null): CancelEventFilter;

    "NameEdited(address,string)"(
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;
    NameEdited(
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;

    "PaymentDynamicSubscription(address,string,uint256)"(
      user?: PromiseOrValue<string> | null,
      subscrptionName?: PromiseOrValue<string> | null,
      price?: null
    ): PaymentDynamicSubscriptionEventFilter;
    PaymentDynamicSubscription(
      user?: PromiseOrValue<string> | null,
      subscrptionName?: PromiseOrValue<string> | null,
      price?: null
    ): PaymentDynamicSubscriptionEventFilter;

    "SelectToken(address,address)"(
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;
    SelectToken(
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;

    "ToggleSubscriptionManager(bool)"(
      enabled?: null
    ): ToggleSubscriptionManagerEventFilter;
    ToggleSubscriptionManager(
      enabled?: null
    ): ToggleSubscriptionManagerEventFilter;

    "TreasuryEdited(address,address)"(
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;
    TreasuryEdited(
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;

    "UserDynamicEdited(address,string,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      subscrptionName?: PromiseOrValue<string> | null,
      price?: null,
      endDate?: null
    ): UserDynamicEditedEventFilter;
    UserDynamicEdited(
      user?: PromiseOrValue<string> | null,
      subscrptionName?: PromiseOrValue<string> | null,
      price?: null,
      endDate?: null
    ): UserDynamicEditedEventFilter;
  };

  estimateGas: {
    approveSubscription(
      amountMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteSubManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editAccount(
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionPrice: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enabled(overrides?: CallOverrides): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionName(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    paymentDynnamic(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paymentDynnamicWithSwap(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionRenewWithSwap(
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timerange(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    tokenDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    tokenSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveSubscription(
      amountMax: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteSubManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editAccount(
      user: PromiseOrValue<string>,
      subscriptionEndDate: PromiseOrValue<BigNumberish>,
      subscriptionPrice: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscriptionName(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paymentDynnamic(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paymentDynnamicWithSwap(
      price: PromiseOrValue<BigNumberish>,
      subscriptionName: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionRenewWithSwap(
      user: PromiseOrValue<string>,
      executor: PromiseOrValue<string>,
      desc: SwapDescriptionStruct,
      calls: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timerange(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
