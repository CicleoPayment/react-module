/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CicleoSubscriptionFactoryInterface extends utils.Interface {
  functions: {
    "createSubscriptionManager(string,address,address,uint256)": FunctionFragment;
    "idCount()": FunctionFragment;
    "ids(uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isSubscriptionManager(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "routerSubscription()": FunctionFragment;
    "routerSwap()": FunctionFragment;
    "security()": FunctionFragment;
    "setRouterSubscription(address)": FunctionFragment;
    "setRouterSwap(address)": FunctionFragment;
    "setSecurityAddress(address)": FunctionFragment;
    "subscriptionManagerId(address)": FunctionFragment;
    "taxAccount()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyIfOwner(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createSubscriptionManager"
      | "idCount"
      | "ids"
      | "initialize"
      | "isSubscriptionManager"
      | "owner"
      | "renounceOwnership"
      | "routerSubscription"
      | "routerSwap"
      | "security"
      | "setRouterSubscription"
      | "setRouterSwap"
      | "setSecurityAddress"
      | "subscriptionManagerId"
      | "taxAccount"
      | "transferOwnership"
      | "verifyIfOwner"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createSubscriptionManager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "idCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ids",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isSubscriptionManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerSubscription",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "routerSwap",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "security", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setRouterSubscription",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRouterSwap",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSecurityAddress",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionManagerId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "taxAccount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyIfOwner",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "idCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isSubscriptionManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "routerSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "routerSwap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "security", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRouterSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRouterSwap",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSecurityAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionManagerId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taxAccount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyIfOwner",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "SubscriptionManagerCreated(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionManagerCreated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface SubscriptionManagerCreatedEventObject {
  creator: string;
  subscriptionManagerAddress: string;
  subscriptionManagerId: BigNumber;
}
export type SubscriptionManagerCreatedEvent = TypedEvent<
  [string, string, BigNumber],
  SubscriptionManagerCreatedEventObject
>;

export type SubscriptionManagerCreatedEventFilter =
  TypedEventFilter<SubscriptionManagerCreatedEvent>;

export interface CicleoSubscriptionFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CicleoSubscriptionFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createSubscriptionManager(
      name: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      timerange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    idCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isSubscriptionManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    routerSubscription(overrides?: CallOverrides): Promise<[string]>;

    routerSwap(overrides?: CallOverrides): Promise<[string]>;

    security(overrides?: CallOverrides): Promise<[string]>;

    setRouterSubscription(
      _routerSubscription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRouterSwap(
      _routerSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSecurityAddress(
      _securityAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionManagerId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taxAccount(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  createSubscriptionManager(
    name: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    treasury: PromiseOrValue<string>,
    timerange: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  idCount(overrides?: CallOverrides): Promise<BigNumber>;

  ids(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _security: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isSubscriptionManager(
    _address: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  routerSubscription(overrides?: CallOverrides): Promise<string>;

  routerSwap(overrides?: CallOverrides): Promise<string>;

  security(overrides?: CallOverrides): Promise<string>;

  setRouterSubscription(
    _routerSubscription: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRouterSwap(
    _routerSwap: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSecurityAddress(
    _securityAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionManagerId(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  taxAccount(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyIfOwner(
    user: PromiseOrValue<string>,
    id: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    createSubscriptionManager(
      name: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      timerange: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    idCount(overrides?: CallOverrides): Promise<BigNumber>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _security: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isSubscriptionManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    routerSubscription(overrides?: CallOverrides): Promise<string>;

    routerSwap(overrides?: CallOverrides): Promise<string>;

    security(overrides?: CallOverrides): Promise<string>;

    setRouterSubscription(
      _routerSubscription: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRouterSwap(
      _routerSwap: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSecurityAddress(
      _securityAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionManagerId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxAccount(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "SubscriptionManagerCreated(address,address,uint256)"(
      creator?: null,
      subscriptionManagerAddress?: PromiseOrValue<string> | null,
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null
    ): SubscriptionManagerCreatedEventFilter;
    SubscriptionManagerCreated(
      creator?: null,
      subscriptionManagerAddress?: PromiseOrValue<string> | null,
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null
    ): SubscriptionManagerCreatedEventFilter;
  };

  estimateGas: {
    createSubscriptionManager(
      name: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      timerange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    idCount(overrides?: CallOverrides): Promise<BigNumber>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isSubscriptionManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    routerSubscription(overrides?: CallOverrides): Promise<BigNumber>;

    routerSwap(overrides?: CallOverrides): Promise<BigNumber>;

    security(overrides?: CallOverrides): Promise<BigNumber>;

    setRouterSubscription(
      _routerSubscription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRouterSwap(
      _routerSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSecurityAddress(
      _securityAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionManagerId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taxAccount(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createSubscriptionManager(
      name: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      treasury: PromiseOrValue<string>,
      timerange: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    idCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ids(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _security: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isSubscriptionManager(
      _address: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    routerSubscription(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    routerSwap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    security(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRouterSubscription(
      _routerSubscription: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRouterSwap(
      _routerSwap: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSecurityAddress(
      _securityAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionManagerId(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taxAccount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyIfOwner(
      user: PromiseOrValue<string>,
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
