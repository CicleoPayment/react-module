/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IOpenOceanCaller {
  export type CallDescriptionStruct = {
    target: PromiseOrValue<BigNumberish>;
    gasLimit: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type CallDescriptionStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ] & {
    target: BigNumber;
    gasLimit: BigNumber;
    value: BigNumber;
    data: string;
  };
}

export interface IOpenOceanCallerInterface extends utils.Interface {
  functions: {
    "makeCall((uint256,uint256,uint256,bytes))": FunctionFragment;
    "makeCalls((uint256,uint256,uint256,bytes)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "makeCall" | "makeCalls"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "makeCall",
    values: [IOpenOceanCaller.CallDescriptionStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "makeCalls",
    values: [IOpenOceanCaller.CallDescriptionStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "makeCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "makeCalls", data: BytesLike): Result;

  events: {};
}

export interface IOpenOceanCaller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOpenOceanCallerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    makeCall(
      desc: IOpenOceanCaller.CallDescriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    makeCalls(
      desc: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  makeCall(
    desc: IOpenOceanCaller.CallDescriptionStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  makeCalls(
    desc: IOpenOceanCaller.CallDescriptionStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    makeCall(
      desc: IOpenOceanCaller.CallDescriptionStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    makeCalls(
      desc: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    makeCall(
      desc: IOpenOceanCaller.CallDescriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    makeCalls(
      desc: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    makeCall(
      desc: IOpenOceanCaller.CallDescriptionStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    makeCalls(
      desc: IOpenOceanCaller.CallDescriptionStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
