/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface CicleoSubscriptionBridgeManagerInterface
  extends utils.Interface {
  functions: {
    "changeSubscriptionLimit(uint256,uint256,uint256)": FunctionFragment;
    "payFunctionWithBridge(uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "renewFunctionWithBridge(uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "usersSubscriptionLimit(uint256,uint256,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeSubscriptionLimit"
      | "payFunctionWithBridge"
      | "renewFunctionWithBridge"
      | "usersSubscriptionLimit"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeSubscriptionLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payFunctionWithBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renewFunctionWithBridge",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "usersSubscriptionLimit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeSubscriptionLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "payFunctionWithBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renewFunctionWithBridge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usersSubscriptionLimit",
    data: BytesLike
  ): Result;

  events: {
    "EditSubscriptionLimit(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EditSubscriptionLimit"): EventFragment;
}

export interface EditSubscriptionLimitEventObject {
  user: string;
  chainId: BigNumber;
  subscriptionManagerId: BigNumber;
  amountMaxPerPeriod: BigNumber;
}
export type EditSubscriptionLimitEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  EditSubscriptionLimitEventObject
>;

export type EditSubscriptionLimitEventFilter =
  TypedEventFilter<EditSubscriptionLimitEvent>;

export interface CicleoSubscriptionBridgeManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CicleoSubscriptionBridgeManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeSubscriptionLimit(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      amountMaxPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renewFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    usersSubscriptionLimit(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  changeSubscriptionLimit(
    chainId: PromiseOrValue<BigNumberish>,
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    amountMaxPerPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payFunctionWithBridge(
    chainId: PromiseOrValue<BigNumberish>,
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    bridge: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renewFunctionWithBridge(
    chainId: PromiseOrValue<BigNumberish>,
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    price: PromiseOrValue<BigNumberish>,
    _token: PromiseOrValue<string>,
    bridge: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  usersSubscriptionLimit(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    arg2: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    changeSubscriptionLimit(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      amountMaxPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    payFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renewFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    usersSubscriptionLimit(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "EditSubscriptionLimit(address,uint256,uint256,uint256)"(
      user?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      amountMaxPerPeriod?: null
    ): EditSubscriptionLimitEventFilter;
    EditSubscriptionLimit(
      user?: PromiseOrValue<string> | null,
      chainId?: PromiseOrValue<BigNumberish> | null,
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      amountMaxPerPeriod?: null
    ): EditSubscriptionLimitEventFilter;
  };

  estimateGas: {
    changeSubscriptionLimit(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      amountMaxPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renewFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    usersSubscriptionLimit(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeSubscriptionLimit(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      amountMaxPerPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renewFunctionWithBridge(
      chainId: PromiseOrValue<BigNumberish>,
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      price: PromiseOrValue<BigNumberish>,
      _token: PromiseOrValue<string>,
      bridge: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    usersSubscriptionLimit(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      arg2: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
