/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export type PaymentManagerDataStruct = {
  treasuryAccount: PromiseOrValue<string>;
  paymentToken: PromiseOrValue<string>;
  name: PromiseOrValue<string>;
};

export type PaymentManagerDataStructOutput = [string, string, string] & {
  treasuryAccount: string;
  paymentToken: string;
  name: string;
};

export interface PaymentManagerFacetInterface extends utils.Interface {
  functions: {
    "createPaymentManager(string,address,address)": FunctionFragment;
    "editPaymentManagerToken(uint256,address)": FunctionFragment;
    "editPaymentManagerTreasury(uint256,address)": FunctionFragment;
    "getPaymentManagerInfo(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createPaymentManager"
      | "editPaymentManagerToken"
      | "editPaymentManagerTreasury"
      | "getPaymentManagerInfo"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPaymentManager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "editPaymentManagerToken",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "editPaymentManagerTreasury",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPaymentManagerInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "createPaymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPaymentManagerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "editPaymentManagerTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPaymentManagerInfo",
    data: BytesLike
  ): Result;

  events: {
    "PaymentManagerCreated(uint256,address,address,address)": EventFragment;
    "PaymentManagerOwnerChanged(uint256,address)": EventFragment;
    "PaymentManagerTokenChanged(uint256,address)": EventFragment;
    "PaymentManagerTreasuryChanged(uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentManagerCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentManagerOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentManagerTokenChanged"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PaymentManagerTreasuryChanged"
  ): EventFragment;
}

export interface PaymentManagerCreatedEventObject {
  paymentManagerId: BigNumber;
  user: string;
  paymentToken: string;
  treasuryAccount: string;
}
export type PaymentManagerCreatedEvent = TypedEvent<
  [BigNumber, string, string, string],
  PaymentManagerCreatedEventObject
>;

export type PaymentManagerCreatedEventFilter =
  TypedEventFilter<PaymentManagerCreatedEvent>;

export interface PaymentManagerOwnerChangedEventObject {
  paymentManagerId: BigNumber;
  owner: string;
}
export type PaymentManagerOwnerChangedEvent = TypedEvent<
  [BigNumber, string],
  PaymentManagerOwnerChangedEventObject
>;

export type PaymentManagerOwnerChangedEventFilter =
  TypedEventFilter<PaymentManagerOwnerChangedEvent>;

export interface PaymentManagerTokenChangedEventObject {
  paymentManagerId: BigNumber;
  paymentToken: string;
}
export type PaymentManagerTokenChangedEvent = TypedEvent<
  [BigNumber, string],
  PaymentManagerTokenChangedEventObject
>;

export type PaymentManagerTokenChangedEventFilter =
  TypedEventFilter<PaymentManagerTokenChangedEvent>;

export interface PaymentManagerTreasuryChangedEventObject {
  paymentManagerId: BigNumber;
  treasury: string;
}
export type PaymentManagerTreasuryChangedEvent = TypedEvent<
  [BigNumber, string],
  PaymentManagerTreasuryChangedEventObject
>;

export type PaymentManagerTreasuryChangedEventFilter =
  TypedEventFilter<PaymentManagerTreasuryChangedEvent>;

export interface PaymentManagerFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PaymentManagerFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPaymentManager(
      name: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      treasuryAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPaymentManagerToken(
      ids: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editPaymentManagerTreasury(
      ids: PromiseOrValue<BigNumberish>,
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPaymentManagerInfo(
      paymentManagerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PaymentManagerDataStructOutput, number, string] & {
        tokenDecimals: number;
        tokenSymbol: string;
      }
    >;
  };

  createPaymentManager(
    name: PromiseOrValue<string>,
    paymentToken: PromiseOrValue<string>,
    treasuryAccount: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPaymentManagerToken(
    ids: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editPaymentManagerTreasury(
    ids: PromiseOrValue<BigNumberish>,
    newTreasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPaymentManagerInfo(
    paymentManagerId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [PaymentManagerDataStructOutput, number, string] & {
      tokenDecimals: number;
      tokenSymbol: string;
    }
  >;

  callStatic: {
    createPaymentManager(
      name: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      treasuryAccount: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editPaymentManagerToken(
      ids: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    editPaymentManagerTreasury(
      ids: PromiseOrValue<BigNumberish>,
      newTreasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPaymentManagerInfo(
      paymentManagerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PaymentManagerDataStructOutput, number, string] & {
        tokenDecimals: number;
        tokenSymbol: string;
      }
    >;
  };

  filters: {
    "PaymentManagerCreated(uint256,address,address,address)"(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      treasuryAccount?: null
    ): PaymentManagerCreatedEventFilter;
    PaymentManagerCreated(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentToken?: PromiseOrValue<string> | null,
      treasuryAccount?: null
    ): PaymentManagerCreatedEventFilter;

    "PaymentManagerOwnerChanged(uint256,address)"(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PaymentManagerOwnerChangedEventFilter;
    PaymentManagerOwnerChanged(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      owner?: PromiseOrValue<string> | null
    ): PaymentManagerOwnerChangedEventFilter;

    "PaymentManagerTokenChanged(uint256,address)"(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      paymentToken?: PromiseOrValue<string> | null
    ): PaymentManagerTokenChangedEventFilter;
    PaymentManagerTokenChanged(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      paymentToken?: PromiseOrValue<string> | null
    ): PaymentManagerTokenChangedEventFilter;

    "PaymentManagerTreasuryChanged(uint256,address)"(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      treasury?: PromiseOrValue<string> | null
    ): PaymentManagerTreasuryChangedEventFilter;
    PaymentManagerTreasuryChanged(
      paymentManagerId?: PromiseOrValue<BigNumberish> | null,
      treasury?: PromiseOrValue<string> | null
    ): PaymentManagerTreasuryChangedEventFilter;
  };

  estimateGas: {
    createPaymentManager(
      name: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      treasuryAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPaymentManagerToken(
      ids: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editPaymentManagerTreasury(
      ids: PromiseOrValue<BigNumberish>,
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPaymentManagerInfo(
      paymentManagerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPaymentManager(
      name: PromiseOrValue<string>,
      paymentToken: PromiseOrValue<string>,
      treasuryAccount: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPaymentManagerToken(
      ids: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editPaymentManagerTreasury(
      ids: PromiseOrValue<BigNumberish>,
      newTreasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPaymentManagerInfo(
      paymentManagerId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
