/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SubscriptionManager {
  export type SubscriptionStructStruct = {
    price: PromiseOrValue<BigNumberish>;
    isActive: PromiseOrValue<boolean>;
    name: PromiseOrValue<string>;
  };

  export type SubscriptionStructStructOutput = [BigNumber, boolean, string] & {
    price: BigNumber;
    isActive: boolean;
    name: string;
  };
}

export interface SubscriptionManagerInterface extends utils.Interface {
  functions: {
    "approveSubscription(uint256)": FunctionFragment;
    "cancel()": FunctionFragment;
    "editSubscription(uint256,uint256,string,bool)": FunctionFragment;
    "factory()": FunctionFragment;
    "getActiveSubscriptionCount()": FunctionFragment;
    "getDecimals()": FunctionFragment;
    "getSubscriptionStatus(address)": FunctionFragment;
    "getSubscriptions()": FunctionFragment;
    "getSymbol()": FunctionFragment;
    "name()": FunctionFragment;
    "newSubscription(uint256,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "payment(uint8)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setName(string)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "subscriptionNumber()": FunctionFragment;
    "subscriptionRenew(address)": FunctionFragment;
    "subscriptions(uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "users(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "approveSubscription"
      | "cancel"
      | "editSubscription"
      | "factory"
      | "getActiveSubscriptionCount"
      | "getDecimals"
      | "getSubscriptionStatus"
      | "getSubscriptions"
      | "getSymbol"
      | "name"
      | "newSubscription"
      | "owner"
      | "payment"
      | "renounceOwnership"
      | "setName"
      | "setTreasury"
      | "subscriptionNumber"
      | "subscriptionRenew"
      | "subscriptions"
      | "token"
      | "transferOwnership"
      | "treasury"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "approveSubscription",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "editSubscription",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getActiveSubscriptionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptionStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSubscriptions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getSymbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "newSubscription",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "payment",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionNumber",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptionRenew",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "subscriptions",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "editSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getActiveSubscriptionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptionStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSubscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getSymbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "newSubscription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptionRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "subscriptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;

  events: {
    "ApproveSubscription(address,uint256)": EventFragment;
    "Cancel(address)": EventFragment;
    "NameEdited(address,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Payment(address,uint256)": EventFragment;
    "SubscriptionEdited(address,uint256,uint256,bool)": EventFragment;
    "TreasuryEdited(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancel"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Payment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SubscriptionEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryEdited"): EventFragment;
}

export interface ApproveSubscriptionEventObject {
  user: string;
  amountPerMonth: BigNumber;
}
export type ApproveSubscriptionEvent = TypedEvent<
  [string, BigNumber],
  ApproveSubscriptionEventObject
>;

export type ApproveSubscriptionEventFilter =
  TypedEventFilter<ApproveSubscriptionEvent>;

export interface CancelEventObject {
  user: string;
}
export type CancelEvent = TypedEvent<[string], CancelEventObject>;

export type CancelEventFilter = TypedEventFilter<CancelEvent>;

export interface NameEditedEventObject {
  user: string;
  newName: string;
}
export type NameEditedEvent = TypedEvent<
  [string, string],
  NameEditedEventObject
>;

export type NameEditedEventFilter = TypedEventFilter<NameEditedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PaymentEventObject {
  user: string;
  subscrptionType: BigNumber;
}
export type PaymentEvent = TypedEvent<[string, BigNumber], PaymentEventObject>;

export type PaymentEventFilter = TypedEventFilter<PaymentEvent>;

export interface SubscriptionEditedEventObject {
  user: string;
  subscrptionId: BigNumber;
  price: BigNumber;
  isActive: boolean;
}
export type SubscriptionEditedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean],
  SubscriptionEditedEventObject
>;

export type SubscriptionEditedEventFilter =
  TypedEventFilter<SubscriptionEditedEvent>;

export interface TreasuryEditedEventObject {
  user: string;
  newTreasury: string;
}
export type TreasuryEditedEvent = TypedEvent<
  [string, string],
  TreasuryEditedEventObject
>;

export type TreasuryEditedEventFilter = TypedEventFilter<TreasuryEditedEvent>;

export interface SubscriptionManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SubscriptionManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    approveSubscription(
      amountMaxPerMonth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    editSubscription(
      id: PromiseOrValue<BigNumberish>,
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getActiveSubscriptionCount(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { count: BigNumber }>;

    getDecimals(overrides?: CallOverrides): Promise<[number]>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { subscriptionId: BigNumber; isActive: boolean }
    >;

    getSubscriptions(
      overrides?: CallOverrides
    ): Promise<[SubscriptionManager.SubscriptionStructStructOutput[]]>;

    getSymbol(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    newSubscription(
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payment(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptionNumber(overrides?: CallOverrides): Promise<[BigNumber]>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        subscriptionEndDate: BigNumber;
        subscriptionId: BigNumber;
        approval: BigNumber;
        lastPayment: BigNumber;
        canceled: boolean;
      }
    >;
  };

  approveSubscription(
    amountMaxPerMonth: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  editSubscription(
    id: PromiseOrValue<BigNumberish>,
    _subscriptionPrice: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    isActive: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getActiveSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

  getDecimals(overrides?: CallOverrides): Promise<number>;

  getSubscriptionStatus(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean] & { subscriptionId: BigNumber; isActive: boolean }
  >;

  getSubscriptions(
    overrides?: CallOverrides
  ): Promise<SubscriptionManager.SubscriptionStructStructOutput[]>;

  getSymbol(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  newSubscription(
    _subscriptionPrice: PromiseOrValue<BigNumberish>,
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payment(
    id: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    _name: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    _treasury: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

  subscriptionRenew(
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  subscriptions(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, boolean, string] & {
      price: BigNumber;
      isActive: boolean;
      name: string;
    }
  >;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  users(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
      subscriptionEndDate: BigNumber;
      subscriptionId: BigNumber;
      approval: BigNumber;
      lastPayment: BigNumber;
      canceled: boolean;
    }
  >;

  callStatic: {
    approveSubscription(
      amountMaxPerMonth: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    cancel(overrides?: CallOverrides): Promise<void>;

    editSubscription(
      id: PromiseOrValue<BigNumberish>,
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    getActiveSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<number>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean] & { subscriptionId: BigNumber; isActive: boolean }
    >;

    getSubscriptions(
      overrides?: CallOverrides
    ): Promise<SubscriptionManager.SubscriptionStructStructOutput[]>;

    getSymbol(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    newSubscription(
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payment(
      id: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, boolean, string] & {
        price: BigNumber;
        isActive: boolean;
        name: string;
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean] & {
        subscriptionEndDate: BigNumber;
        subscriptionId: BigNumber;
        approval: BigNumber;
        lastPayment: BigNumber;
        canceled: boolean;
      }
    >;
  };

  filters: {
    "ApproveSubscription(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      amountPerMonth?: null
    ): ApproveSubscriptionEventFilter;
    ApproveSubscription(
      user?: PromiseOrValue<string> | null,
      amountPerMonth?: null
    ): ApproveSubscriptionEventFilter;

    "Cancel(address)"(user?: PromiseOrValue<string> | null): CancelEventFilter;
    Cancel(user?: PromiseOrValue<string> | null): CancelEventFilter;

    "NameEdited(address,string)"(
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;
    NameEdited(
      user?: PromiseOrValue<string> | null,
      newName?: null
    ): NameEditedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Payment(address,uint256)"(
      user?: PromiseOrValue<string> | null,
      subscrptionType?: PromiseOrValue<BigNumberish> | null
    ): PaymentEventFilter;
    Payment(
      user?: PromiseOrValue<string> | null,
      subscrptionType?: PromiseOrValue<BigNumberish> | null
    ): PaymentEventFilter;

    "SubscriptionEdited(address,uint256,uint256,bool)"(
      user?: PromiseOrValue<string> | null,
      subscrptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;
    SubscriptionEdited(
      user?: PromiseOrValue<string> | null,
      subscrptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null,
      isActive?: null
    ): SubscriptionEditedEventFilter;

    "TreasuryEdited(address,address)"(
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;
    TreasuryEdited(
      user?: PromiseOrValue<string> | null,
      newTreasury?: null
    ): TreasuryEditedEventFilter;
  };

  estimateGas: {
    approveSubscription(
      amountMaxPerMonth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    editSubscription(
      id: PromiseOrValue<BigNumberish>,
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    getActiveSubscriptionCount(overrides?: CallOverrides): Promise<BigNumber>;

    getDecimals(overrides?: CallOverrides): Promise<BigNumber>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSubscriptions(overrides?: CallOverrides): Promise<BigNumber>;

    getSymbol(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    newSubscription(
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payment(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptionNumber(overrides?: CallOverrides): Promise<BigNumber>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveSubscription(
      amountMaxPerMonth: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    editSubscription(
      id: PromiseOrValue<BigNumberish>,
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      isActive: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getActiveSubscriptionCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSubscriptionStatus(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSubscriptions(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSymbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    newSubscription(
      _subscriptionPrice: PromiseOrValue<BigNumberish>,
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payment(
      id: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      _name: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      _treasury: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptionNumber(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    subscriptionRenew(
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    subscriptions(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
