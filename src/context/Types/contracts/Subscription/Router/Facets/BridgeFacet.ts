/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export type PaymentParametersStruct = {
  chainId: PromiseOrValue<BigNumberish>;
  subscriptionManagerId: PromiseOrValue<BigNumberish>;
  subscriptionId: PromiseOrValue<BigNumberish>;
  priceInSubToken: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
};

export type PaymentParametersStructOutput = [
  BigNumber,
  BigNumber,
  number,
  BigNumber,
  string
] & {
  chainId: BigNumber;
  subscriptionManagerId: BigNumber;
  subscriptionId: number;
  priceInSubToken: BigNumber;
  token: string;
};

export interface BridgeFacetInterface extends utils.Interface {
  functions: {
    "bridgeRenew(uint256,address)": FunctionFragment;
    "bridgeSubscribe((uint256,uint256,uint8,uint256,address),address,address,bytes)": FunctionFragment;
    "getChainID()": FunctionFragment;
    "getEthSignedMessageHash(bytes32)": FunctionFragment;
    "getMessage(uint256,uint8,address,uint256,uint256)": FunctionFragment;
    "getMessageHash(uint256,uint8,address,uint256,uint256)": FunctionFragment;
    "getUserNonce(address)": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "verify(uint256,uint8,address,uint256,uint256,bytes)": FunctionFragment;
    "verifyString(string,uint8,bytes32,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bridgeRenew"
      | "bridgeSubscribe"
      | "getChainID"
      | "getEthSignedMessageHash"
      | "getMessage"
      | "getMessageHash"
      | "getUserNonce"
      | "splitSignature"
      | "verify"
      | "verifyString"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bridgeRenew",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "bridgeSubscribe",
    values: [
      PaymentParametersStruct,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getChainID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessage",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyString",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "bridgeRenew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bridgeSubscribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChainID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMessage", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyString",
    data: BytesLike
  ): Result;

  events: {
    "PaymentSubscription(uint256,address,uint8,uint256)": EventFragment;
    "SelectBlockchain(uint256,address,uint256)": EventFragment;
    "SelectToken(uint256,address,address)": EventFragment;
    "UserEdited(uint256,address,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PaymentSubscription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectBlockchain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SelectToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserEdited"): EventFragment;
}

export interface PaymentSubscriptionEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  price: BigNumber;
}
export type PaymentSubscriptionEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  PaymentSubscriptionEventObject
>;

export type PaymentSubscriptionEventFilter =
  TypedEventFilter<PaymentSubscriptionEvent>;

export interface SelectBlockchainEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  paymentBlockchainId: BigNumber;
}
export type SelectBlockchainEvent = TypedEvent<
  [BigNumber, string, BigNumber],
  SelectBlockchainEventObject
>;

export type SelectBlockchainEventFilter =
  TypedEventFilter<SelectBlockchainEvent>;

export interface SelectTokenEventObject {
  SubscriptionManagerId: BigNumber;
  user: string;
  tokenAddress: string;
}
export type SelectTokenEvent = TypedEvent<
  [BigNumber, string, string],
  SelectTokenEventObject
>;

export type SelectTokenEventFilter = TypedEventFilter<SelectTokenEvent>;

export interface UserEditedEventObject {
  subscriptionManagerId: BigNumber;
  user: string;
  subscriptionId: number;
  endDate: BigNumber;
}
export type UserEditedEvent = TypedEvent<
  [BigNumber, string, number, BigNumber],
  UserEditedEventObject
>;

export type UserEditedEventFilter = TypedEventFilter<UserEditedEvent>;

export interface BridgeFacet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BridgeFacetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bridgeRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bridgeSubscribe(
      paymentParams: PaymentParametersStruct,
      user: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChainID(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessage(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessageHash(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    verify(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyString(
      message: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;
  };

  bridgeRenew(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bridgeSubscribe(
    paymentParams: PaymentParametersStruct,
    user: PromiseOrValue<string>,
    referral: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChainID(overrides?: CallOverrides): Promise<BigNumber>;

  getEthSignedMessageHash(
    _messageHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessage(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessageHash(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserNonce(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  splitSignature(
    sig: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  verify(
    subscriptionManagerId: PromiseOrValue<BigNumberish>,
    subscriptionId: PromiseOrValue<BigNumberish>,
    user: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyString(
    message: PromiseOrValue<string>,
    v: PromiseOrValue<BigNumberish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    bridgeRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    bridgeSubscribe(
      paymentParams: PaymentParametersStruct,
      user: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessage(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessageHash(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    verify(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyString(
      message: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "PaymentSubscription(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;
    PaymentSubscription(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      price?: null
    ): PaymentSubscriptionEventFilter;

    "SelectBlockchain(uint256,address,uint256)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentBlockchainId?: PromiseOrValue<BigNumberish> | null
    ): SelectBlockchainEventFilter;
    SelectBlockchain(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      paymentBlockchainId?: PromiseOrValue<BigNumberish> | null
    ): SelectBlockchainEventFilter;

    "SelectToken(uint256,address,address)"(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;
    SelectToken(
      SubscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      tokenAddress?: PromiseOrValue<string> | null
    ): SelectTokenEventFilter;

    "UserEdited(uint256,address,uint8,uint256)"(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
    UserEdited(
      subscriptionManagerId?: PromiseOrValue<BigNumberish> | null,
      user?: PromiseOrValue<string> | null,
      subscriptionId?: PromiseOrValue<BigNumberish> | null,
      endDate?: null
    ): UserEditedEventFilter;
  };

  estimateGas: {
    bridgeRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bridgeSubscribe(
      paymentParams: PaymentParametersStruct,
      user: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChainID(overrides?: CallOverrides): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessage(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageHash(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verify(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyString(
      message: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bridgeRenew(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bridgeSubscribe(
      paymentParams: PaymentParametersStruct,
      user: PromiseOrValue<string>,
      referral: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChainID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      _messageHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessage(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserNonce(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    splitSignature(
      sig: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      subscriptionManagerId: PromiseOrValue<BigNumberish>,
      subscriptionId: PromiseOrValue<BigNumberish>,
      user: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyString(
      message: PromiseOrValue<string>,
      v: PromiseOrValue<BigNumberish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
