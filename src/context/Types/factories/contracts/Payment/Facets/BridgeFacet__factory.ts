/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  BridgeFacet,
  BridgeFacetInterface,
} from "../../../../contracts/Payment/Facets/BridgeFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "string",
        name: "nameOfPayment",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "PaymentDoneWithCicleo",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentManagerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "bridgePayment",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainID",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
    ],
    name: "getEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "getMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getUserNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "sig",
        type: "bytes",
      },
    ],
    name: "splitSignature",
    outputs: [
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "message",
        type: "string",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
    ],
    name: "verifyString",
    outputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506114b4806100206000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063d271d6e411610066578063d271d6e41461013b578063d2c3fbb71461015b578063d9ff430514610186578063ea74509914610199578063fa540801146101bc57600080fd5b806309ac248e14610098578063564b81ef146100ad5780636834e3a8146100c2578063a7bb58031461010a575b600080fd5b6100ab6100a6366004610ea8565b61021d565b005b465b6040519081526020015b60405180910390f35b6100af6100d0366004610f7f565b6001600160a01b031660009081527faac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed29602052604090205490565b61011d610118366004610f9c565b610459565b60408051938452602084019290925260ff16908201526060016100b9565b61014e610149366004610fd9565b6104e2565b6040516100b99190611074565b61016e6101693660046110a7565b61054e565b6040516001600160a01b0390911681526020016100b9565b6100af610194366004610fd9565b6106df565b6101ac6101a736600461110c565b61071f565b60405190151581526020016100b9565b6100af6101ca36600461119e565b604080517f19457468657265756d205369676e6564204d6573736167653a0a3030303030306020820152908101829052600090606001604051602081830303815290604052805190602001209050919050565b610277836020015183856040015186606001516102577faac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed2990565b6001600160a01b038816600090815260209190915260409020548661071f565b6102bc5760405162461bcd60e51b8152602060048201526011602482015270496e76616c6964207369676e617475726560781b60448201526064015b60405180910390fd5b6000610303846020015160009081527fd99b573b44155c1da097fb84c2f030c9f8daa830c708ef6625b3e30f7ba2234e60205260409020600101546001600160a01b031690565b60408581015190516323b872dd60e01b815233600482015230602482015260448101919091529091506001600160a01b038216906323b872dd90606401602060405180830381600087803b15801561035a57600080fd5b505af115801561036e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039291906111b7565b506001600160a01b03831660009081527faac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed29602052604081208054916103d6836111ef565b91905055506103ed84602001518560400151610774565b83606001516040516103ff9190611226565b6040518091039020836001600160a01b031685602001517f2f5f2ee5aa57a7095e4d595ee43379ebe9db86f64a35c08ec2b2f345564c52c7876040015160405161044b91815260200190565b60405180910390a450505050565b600080600083516041146104af5760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064016102b3565b50505060208101516040820151606083015160001a601b8110156104db576104d8601b82611242565b90505b9193909250565b6060466104ee8161098d565b610502876001600160a01b03166014610a2a565b61050b8961098d565b866105158961098d565b61051e8861098d565b60405160200161053396959493929190611267565b60405160208183030381529060405291505095945050505050565b6040805180820190915260208082527f19457468657265756d205369676e6564204d6573736167653a0a303030303030908201528451600091906039820190620f423f81111561059d57600080fd5b6000620186a05b80156106295760006105b68285611377565b9050806105d557826105d5576105cd600a83611377565b9150506105a4565b826105df816111ef565b93506105ed90508282611399565b6105f790856113b8565b9350610604600a83611377565b91506106116030826113cf565b90508461061d816111ef565b955050808553506105a4565b8161063757601b9150610645565b610642601a836113cf565b91505b8185526000858b60405160200161065d9291906113e7565b60408051601f1981840301815282825280516020918201206000845290830180835281905260ff8d1691830191909152606082018b9052608082018a9052915060019060a0016020604051602081039080840390855afa1580156106c5573d6000803e3d6000fd5b5050604051601f1901519c9b505050505050505050505050565b60006106ee86868686866104e2565b6040516020016106fe9190611226565b60405160208183030381529060405280519060200120905095945050505050565b60008061072f88888888886104e2565b9050600080600061073f86610459565b925092509250896001600160a01b031661075b8583868661054e565b6001600160a01b0316149b9a5050505050505050505050565b600061077f83610bcd565b60208101519091506001600160a01b03166107ce5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c696420737562696e666f60881b60448201526064016102b3565b60006103e86108077fd8f6e013ff0cbc66ded25851d52c18673042e44ec585aeabfa2e9126bad1f74f5461ffff600160a01b9091041690565b6108159061ffff1685611399565b61081f9190611377565b602083015183519192506001600160a01b03169063a9059cbb9061084384876113b8565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561088957600080fd5b505af115801561089d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c191906111b7565b5081602001516001600160a01b031663a9059cbb6109067fd8f6e013ff0cbc66ded25851d52c18673042e44ec585aeabfa2e9126bad1f74e546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401602060405180830381600087803b15801561094e57600080fd5b505af1158015610962573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061098691906111b7565b5050505050565b6060600061099a83610cdb565b600101905060008167ffffffffffffffff8111156109ba576109ba610db4565b6040519080825280601f01601f1916602001820160405280156109e4576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610a1d57610a22565b6109ee565b509392505050565b60606000610a39836002611399565b610a449060026113cf565b67ffffffffffffffff811115610a5c57610a5c610db4565b6040519080825280601f01601f191660200182016040528015610a86576020820181803683370190505b509050600360fc1b81600081518110610aa157610aa1611416565b60200101906001600160f81b031916908160001a905350600f60fb1b81600181518110610ad057610ad0611416565b60200101906001600160f81b031916908160001a9053506000610af4846002611399565b610aff9060016113cf565b90505b6001811115610b77576f181899199a1a9b1b9c1cb0b131b232b360811b85600f1660108110610b3357610b33611416565b1a60f81b828281518110610b4957610b49611416565b60200101906001600160f81b031916908160001a90535060049490941c93610b708161142c565b9050610b02565b508315610bc65760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e7460448201526064016102b3565b9392505050565b6040805160608082018352600080835260208084018290528385018390528582527fd99b573b44155c1da097fb84c2f030c9f8daa830c708ef6625b3e30f7ba2234e808252918590208551938401865280546001600160a01b03908116855260018201541691840191909152600281018054949592949192840191610c5190611443565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7d90611443565b8015610cca5780601f10610c9f57610100808354040283529160200191610cca565b820191906000526020600020905b815481529060010190602001808311610cad57829003601f168201915b505050505081525050915050919050565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610d1a5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610d46576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610d6457662386f26fc10000830492506010015b6305f5e1008310610d7c576305f5e100830492506008015b6127108310610d9057612710830492506004015b60648310610da2576064830492506002015b600a8310610dae576001015b92915050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff81118282101715610ded57610ded610db4565b60405290565b600082601f830112610e0457600080fd5b813567ffffffffffffffff80821115610e1f57610e1f610db4565b604051601f8301601f19908116603f01168101908282118183101715610e4757610e47610db4565b81604052838152866020858801011115610e6057600080fd5b836020870160208301376000602085830101528094505050505092915050565b6001600160a01b0381168114610e9557600080fd5b50565b8035610ea381610e80565b919050565b600080600060608486031215610ebd57600080fd5b833567ffffffffffffffff80821115610ed557600080fd5b9085019060a08288031215610ee957600080fd5b610ef1610dca565b823581526020830135602082015260408301356040820152606083013582811115610f1b57600080fd5b610f2789828601610df3565b60608301525060808301359250610f3d83610e80565b608081018390529450610f5260208701610e98565b93506040860135915080821115610f6857600080fd5b50610f7586828701610df3565b9150509250925092565b600060208284031215610f9157600080fd5b8135610bc681610e80565b600060208284031215610fae57600080fd5b813567ffffffffffffffff811115610fc557600080fd5b610fd184828501610df3565b949350505050565b600080600080600060a08688031215610ff157600080fd5b85359450602086013561100381610e80565b935060408601359250606086013567ffffffffffffffff81111561102657600080fd5b61103288828901610df3565b95989497509295608001359392505050565b60005b8381101561105f578181015183820152602001611047565b8381111561106e576000848401525b50505050565b6020815260008251806020840152611093816040850160208701611044565b601f01601f19169190910160400192915050565b600080600080608085870312156110bd57600080fd5b843567ffffffffffffffff8111156110d457600080fd5b6110e087828801610df3565b945050602085013560ff811681146110f757600080fd5b93969395505050506040820135916060013590565b60008060008060008060c0878903121561112557600080fd5b86359550602087013561113781610e80565b945060408701359350606087013567ffffffffffffffff8082111561115b57600080fd5b6111678a838b01610df3565b94506080890135935060a089013591508082111561118457600080fd5b5061119189828a01610df3565b9150509295509295509295565b6000602082840312156111b057600080fd5b5035919050565b6000602082840312156111c957600080fd5b81518015158114610bc657600080fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611203576112036111d9565b5060010190565b6000815161121c818560208601611044565b9290920192915050565b60008251611238818460208701611044565b9190910192915050565b600060ff821660ff84168060ff0382111561125f5761125f6111d9565b019392505050565b7f4369636c656f2042726964676564205061796d656e74730a0a436861696e3a20815260006020885161129f81838601848d01611044565b6552ab9b2b91d160cd1b9084018281019190915288516112c581602784018c8601611044565b7052830bcb6b2b73a1026b0b730b3b2b91d160751b6027929091019182015287516112f68160398401858c01611044565b6552730b6b29d160cd1b60399290910191820152865161131c8160408401858b01611044565b665283934b1b29d160c51b6040929091019182015285516113438160488401858a01611044565b6113686113626048838501016652737b731b29d160c51b815260080190565b8761120a565b9b9a5050505050505050505050565b60008261139457634e487b7160e01b600052601260045260246000fd5b500490565b60008160001904831182151516156113b3576113b36111d9565b500290565b6000828210156113ca576113ca6111d9565b500390565b600082198211156113e2576113e26111d9565b500190565b600083516113f9818460208801611044565b83519083019061140d818360208801611044565b01949350505050565b634e487b7160e01b600052603260045260246000fd5b60008161143b5761143b6111d9565b506000190190565b600181811c9082168061145757607f821691505b6020821081141561147857634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220e07a1fd9ee07b15b65a3f970e561f0c6bcec262dda19b2e300ea3c127a66a18b64736f6c63430008090033";

type BridgeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeFacet__factory extends ContractFactory {
  constructor(...args: BridgeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeFacet> {
    return super.deploy(overrides || {}) as Promise<BridgeFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeFacet {
    return super.attach(address) as BridgeFacet;
  }
  override connect(signer: Signer): BridgeFacet__factory {
    return super.connect(signer) as BridgeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeFacetInterface {
    return new utils.Interface(_abi) as BridgeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeFacet {
    return new Contract(address, _abi, signerOrProvider) as BridgeFacet;
  }
}
