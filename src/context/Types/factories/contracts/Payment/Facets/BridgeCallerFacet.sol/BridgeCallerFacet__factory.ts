/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BridgeCallerFacet,
  BridgeCallerFacetInterface,
} from "../../../../../contracts/Payment/Facets/BridgeCallerFacet.sol/BridgeCallerFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "paymentManagerId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "name",
        type: "string",
      },
    ],
    name: "PaymentBridged",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentManagerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "_bridgeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "requiresDeposit",
            type: "bool",
          },
        ],
        internalType: "struct LibSwap.SwapData[]",
        name: "_swapData",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "dstPoolId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "minAmountLD",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "dstGasForCall",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lzFee",
            type: "uint256",
          },
          {
            internalType: "address payable",
            name: "refundAddress",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callTo",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct StargateData",
        name: "_stargateData",
        type: "tuple",
      },
      {
        internalType: "uint256",
        name: "inPrice",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "payWithCicleoWithBridge",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506111e7806100206000396000f3fe60806040526004361061001e5760003560e01c80639dde78ec14610023575b600080fd5b610036610031366004610998565b610038565b005b468852604080516020601f8401819004810282018101909252828152610080918a913391869086908190840183828082843760009201919091525050505060c08801516100ed565b60c08501526100948833898989898961010c565b8760400151336001600160a01b031689602001517f34b0fdd9d953b6aa6d5c5b45ac1815e58cd0223ac531a961758360a9d4c3d26a8b606001516040516100db9190610adb565b60405180910390a45050505050505050565b6060610103826100fe8787876104af565b61050e565b95945050505050565b60808701516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561015257600080fd5b505afa158015610166573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018a9190610af5565b60808901516040516323b872dd60e01b81526001600160a01b038a8116600483015230602483015260448201869052929350731231deb6f5749ef6ce6943a275a1d3e7486f4eae92909116906323b872dd90606401602060405180830381600087803b1580156101f957600080fd5b505af115801561020d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102319190610b19565b5060808901516040516370a0823160e01b8152306004820152849184916001600160a01b03909116906370a082319060240160206040518083038186803b15801561027b57600080fd5b505afa15801561028f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102b39190610af5565b6102bd9190610b36565b10156103025760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b60448201526064015b60405180910390fd5b608089015160405163095ea7b360e01b81526001600160a01b038381166004830152602482018690529091169063095ea7b390604401602060405180830381600087803b15801561035257600080fd5b505af1158015610366573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038a9190610b19565b50836060015134146103d05760405162461bcd60e51b815260206004820152600f60248201526e4572726f72206d73672e76616c756560881b60448201526064016102f9565b841561044157604051636baab60f60e11b81526001600160a01b0382169063d7556c1e90349061040a908b908b908b908b90600401610d00565b6000604051808303818588803b15801561042357600080fd5b505af1158015610437573d6000803e3d6000fd5b50505050506104a4565b604051633b00e80760e01b81526001600160a01b03821690633b00e807903490610471908b908990600401610e31565b6000604051808303818588803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b50505050505b505050505050505050565b6040516060906304d6124760e11b9081906104d290879087908790602401610e56565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529150509392505050565b60606000806000808680602001905181019061052a9190610f23565b93509350935093508583600185516105429190610b36565b81518110610552576105526110a9565b602002602001015160a001819052508383838360405160200161057894939291906110bf565b60405160208183030381529060405294505050505092915050565b634e487b7160e01b600052604160045260246000fd5b604051610140810167ffffffffffffffff811182821017156105cd576105cd610593565b60405290565b60405160e0810167ffffffffffffffff811182821017156105cd576105cd610593565b604051601f8201601f1916810167ffffffffffffffff8111828210171561061f5761061f610593565b604052919050565b600067ffffffffffffffff82111561064157610641610593565b50601f01601f191660200190565b600082601f83011261066057600080fd5b813561067361066e82610627565b6105f6565b81815284602083860101111561068857600080fd5b816020850160208301376000918101602001919091529392505050565b6001600160a01b03811681146106ba57600080fd5b50565b600060a082840312156106cf57600080fd5b60405160a0810167ffffffffffffffff82821081831117156106f3576106f3610593565b81604052829350843583526020850135602084015260408501356040840152606085013591508082111561072657600080fd5b506107338582860161064f565b6060830152506080830135610747816106a5565b6080919091015292915050565b803561075f816106a5565b919050565b80151581146106ba57600080fd5b803561075f81610764565b6000610140828403121561079057600080fd5b6107986105a9565b905081358152602082013567ffffffffffffffff808211156107b957600080fd5b6107c58583860161064f565b602084015260408401359150808211156107de57600080fd5b506107eb8482850161064f565b6040830152506107fd60608301610754565b606082015261080e60808301610754565b608082015261081f60a08301610754565b60a082015260c082013560c082015260e082013560e0820152610100610846818401610772565b90820152610120610858838201610772565b9082015292915050565b60008083601f84011261087457600080fd5b50813567ffffffffffffffff81111561088c57600080fd5b6020830191508360208260051b85010111156108a757600080fd5b9250929050565b600060e082840312156108c057600080fd5b6108c86105d3565b9050813581526020820135602082015260408201356040820152606082013560608201526108f860808301610754565b608082015260a082013567ffffffffffffffff8082111561091857600080fd5b6109248583860161064f565b60a084015260c084013591508082111561093d57600080fd5b5061094a8482850161064f565b60c08301525092915050565b60008083601f84011261096857600080fd5b50813567ffffffffffffffff81111561098057600080fd5b6020830191508360208285010111156108a757600080fd5b60008060008060008060008060c0898b0312156109b457600080fd5b883567ffffffffffffffff808211156109cc57600080fd5b6109d88c838d016106bd565b995060208b01359150808211156109ee57600080fd5b6109fa8c838d0161077d565b985060408b0135915080821115610a1057600080fd5b610a1c8c838d01610862565b909850965060608b0135915080821115610a3557600080fd5b610a418c838d016108ae565b955060808b0135945060a08b0135915080821115610a5e57600080fd5b50610a6b8b828c01610956565b999c989b5096995094979396929594505050565b60005b83811015610a9a578181015183820152602001610a82565b83811115610aa9576000848401525b50505050565b60008151808452610ac7816020860160208601610a7f565b601f01601f19169290920160200192915050565b602081526000610aee6020830184610aaf565b9392505050565b600060208284031215610b0757600080fd5b5051919050565b805161075f81610764565b600060208284031215610b2b57600080fd5b8151610aee81610764565b600082821015610b5657634e487b7160e01b600052601160045260246000fd5b500390565b6000610140825184526020830151816020860152610b7b82860182610aaf565b91505060408301518482036040860152610b958282610aaf565b9150506060830151610bb260608601826001600160a01b03169052565b506080830151610bcd60808601826001600160a01b03169052565b5060a0830151610be860a08601826001600160a01b03169052565b5060c083015160c085015260e083015160e085015261010080840151610c118287018215159052565b50506101209283015115159390920192909252919050565b6000808335601e19843603018112610c4057600080fd5b830160208101925035905067ffffffffffffffff811115610c6057600080fd5b8036038313156108a757600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b8051825260208101516020830152604081015160408301526060810151606083015260018060a01b036080820151166080830152600060a082015160e060a0850152610ce760e0850182610aaf565b905060c083015184820360c08601526101038282610aaf565b60006060808352610d1381840188610b5b565b602084820381860152818783528183019050818860051b840101896000805b8b811015610e0d57868403601f190185528235368e900360de19018112610d57578283fd5b8d0160e08135610d66816106a5565b6001600160a01b0390811687528289013590610d81826106a5565b16868901526040610d93838201610754565b6001600160a01b031690870152610dab828b01610754565b6001600160a01b03168a8701526080828101359087015260a0610dd081840184610c29565b83838a0152610de2848a018284610c6f565b935050505060c0610df4818401610772565b1515960195909552509385019391850191600101610d32565b5050508681036040880152610e228189610c98565b9b9a5050505050505050505050565b604081526000610e446040830185610b5b565b82810360208401526101038185610c98565b606081528351606082015260208401516080820152604084015160a08201526000606085015160a060c0840152610e91610100840182610aaf565b60808701516001600160a01b0390811660e08601528616602085015283810360408501529050610ec18185610aaf565b9695505050505050565b805161075f816106a5565b600082601f830112610ee757600080fd5b8151610ef561066e82610627565b818152846020838601011115610f0a57600080fd5b610f1b826020830160208701610a7f565b949350505050565b60008060008060808587031215610f3957600080fd5b84519350602085015167ffffffffffffffff80821115610f5857600080fd5b818701915087601f830112610f6c57600080fd5b815181811115610f7e57610f7e610593565b610f8d60208260051b016105f6565b8082825260208201915060208360051b86010192508a831115610faf57600080fd5b602085015b8381101561107b57805185811115610fcb57600080fd5b860160e0818e03601f19011215610fe157600080fd5b610fe96105d3565b610ff560208301610ecb565b815261100360408301610ecb565b602082015261101460608301610ecb565b604082015261102560808301610ecb565b606082015260a0820151608082015260c08201518781111561104657600080fd5b6110558f602083860101610ed6565b60a08301525061106760e08301610b0e565b60c082015284525060209283019201610fb4565b50809750505050505061109060408601610ecb565b915061109e60608601610ecb565b905092959194509250565b634e487b7160e01b600052603260045260246000fd5b600060808083018784526020828186015281885180845260a093508387019150838160051b880101838b0160005b8381101561117f57898303609f19018552815180516001600160a01b039081168552878201518116888601526040808301518216908601526060808301519091169085015288810151898501528781015160e08986018190529061115382870182610aaf565b91505060c080830151925061116b8187018415159052565b5095870195935050908501906001016110ed565b50506001600160a01b038a166040890152955061119d945050505050565b6001600160a01b038316606083015261010356fea2646970667358221220cd3f019a5015c3437e927bc73c9380628ad0923f69784df7dd97b05984b260e664736f6c63430008090033";

type BridgeCallerFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeCallerFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeCallerFacet__factory extends ContractFactory {
  constructor(...args: BridgeCallerFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeCallerFacet> {
    return super.deploy(overrides || {}) as Promise<BridgeCallerFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeCallerFacet {
    return super.attach(address) as BridgeCallerFacet;
  }
  override connect(signer: Signer): BridgeCallerFacet__factory {
    return super.connect(signer) as BridgeCallerFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeCallerFacetInterface {
    return new utils.Interface(_abi) as BridgeCallerFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeCallerFacet {
    return new Contract(address, _abi, signerOrProvider) as BridgeCallerFacet;
  }
}
