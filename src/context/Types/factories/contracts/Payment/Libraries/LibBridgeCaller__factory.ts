/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  LibBridgeCaller,
  LibBridgeCallerInterface,
} from "../../../../contracts/Payment/Libraries/LibBridgeCaller";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "paymentManagerId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "IERC20",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "getPaymentDestinationCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6103aa61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063675a61ce1461003a575b600080fd5b61004d6100483660046101ba565b610063565b60405161005a91906102ec565b60405180910390f35b6040516060906304d6124760e11b908190610086908790879087906024016102ff565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529150509392505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156100fb576100fb6100c2565b60405290565b600067ffffffffffffffff8084111561011c5761011c6100c2565b604051601f8501601f19908116603f01168101908282118183101715610144576101446100c2565b8160405280935085815286868601111561015d57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b038116811461018e57600080fd5b919050565b600082601f8301126101a457600080fd5b6101b383833560208501610101565b9392505050565b6000806000606084860312156101cf57600080fd5b833567ffffffffffffffff808211156101e757600080fd5b9085019060a082880312156101fb57600080fd5b6102036100d8565b82358152602083013560208201526040830135604082015260608301358281111561022d57600080fd5b8301601f8101891361023e57600080fd5b61024d89823560208401610101565b60608301525061025f60808401610177565b6080820152945061027260208701610177565b9350604086013591508082111561028857600080fd5b5061029586828701610193565b9150509250925092565b6000815180845260005b818110156102c5576020818501810151868301820152016102a9565b818111156102d7576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006101b3602083018461029f565b606081528351606082015260208401516080820152604084015160a08201526000606085015160a060c084015261033a61010084018261029f565b60808701516001600160a01b0390811660e0860152861660208501528381036040850152905061036a818561029f565b969550505050505056fea26469706673582212209b900ed6a8ade247c685daa32d66b73b5825579cc286aa701d53cd65b400087064736f6c63430008090033";

type LibBridgeCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibBridgeCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibBridgeCaller__factory extends ContractFactory {
  constructor(...args: LibBridgeCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibBridgeCaller> {
    return super.deploy(overrides || {}) as Promise<LibBridgeCaller>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibBridgeCaller {
    return super.attach(address) as LibBridgeCaller;
  }
  override connect(signer: Signer): LibBridgeCaller__factory {
    return super.connect(signer) as LibBridgeCaller__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibBridgeCallerInterface {
    return new utils.Interface(_abi) as LibBridgeCallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibBridgeCaller {
    return new Contract(address, _abi, signerOrProvider) as LibBridgeCaller;
  }
}
