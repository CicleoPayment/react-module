/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  BridgeFacet,
  BridgeFacetInterface,
} from "../../../../../contracts/Subscription/Bridge/Facets/BridgeFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "subscriptionManagerId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountMaxPerPeriod",
        type: "uint256",
      },
    ],
    name: "EditSubscriptionLimit",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "subscriptionManagerId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountMaxPerPeriod",
        type: "uint256",
      },
    ],
    name: "changeSubscriptionLimit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "srcChainId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "subManagerId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "users",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "nextPaymentTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionDuration",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionLimit",
            type: "uint256",
          },
        ],
        internalType: "struct UserBridgeData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610249806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806332b323a61461003b5780638b753a2f14610074575b600080fd5b61004e6100493660046101a2565b610089565b604080518251815260208084015190820152918101519082015260600160405180910390f35b6100876100823660046101e7565b61011f565b005b6100ad60405180606001604052806000815260200160008152602001600081525090565b7faac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed296000948552602090815260408086209486529381528385206001600160a01b039390931685529182525091819020815160608101835281548152600182015493810193909352600201549082015290565b60008381527faac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed296020908152604080832085845282528083203380855290835292819020600201849055518381528492869290917fc50df9abeda1236c3cc22ec2e8bd50ee79eda415f485fa7e7978c9239971b51c910160405180910390a4505050565b6000806000606084860312156101b757600080fd5b833592506020840135915060408401356001600160a01b03811681146101dc57600080fd5b809150509250925092565b6000806000606084860312156101fc57600080fd5b50508135936020830135935060409092013591905056fea2646970667358221220c8bacdf5d82f44732f15ae17bfb30eea21f45b14224ee835f099b005b741ef6a64736f6c63430008090033";

type BridgeFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BridgeFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BridgeFacet__factory extends ContractFactory {
  constructor(...args: BridgeFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BridgeFacet> {
    return super.deploy(overrides || {}) as Promise<BridgeFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BridgeFacet {
    return super.attach(address) as BridgeFacet;
  }
  override connect(signer: Signer): BridgeFacet__factory {
    return super.connect(signer) as BridgeFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BridgeFacetInterface {
    return new utils.Interface(_abi) as BridgeFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BridgeFacet {
    return new Contract(address, _abi, signerOrProvider) as BridgeFacet;
  }
}
