/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  AmarokFacet,
  AmarokFacetInterface,
} from "../../../../../contracts/Subscription/Bridge/Facets/AmarokFacet";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "destChainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionManagerId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "subscriptionId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "price",
            type: "uint256",
          },
        ],
        indexed: true,
        internalType: "struct AmarokFacet.BridgePaymentSpec",
        name: "info",
        type: "tuple",
      },
    ],
    name: "PaymentBridgeSubscription",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionManagerId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "subscriptionId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "priceInSubToken",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "_bridgeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "requiresDeposit",
            type: "bool",
          },
        ],
        internalType: "struct LibSwap.SwapData[]",
        name: "_swapData",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "relayerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippageTol",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "destChainDomainId",
            type: "uint32",
          },
        ],
        internalType: "struct AmarokData",
        name: "_amarokData",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "referral",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "duration",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "payFunctionWithBridgeWithAmarok",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionManagerId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "subscriptionId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "priceInSubToken",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "address",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "transactionId",
            type: "bytes32",
          },
          {
            internalType: "string",
            name: "bridge",
            type: "string",
          },
          {
            internalType: "string",
            name: "integrator",
            type: "string",
          },
          {
            internalType: "address",
            name: "referrer",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "minAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "destinationChainId",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "hasSourceSwaps",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "hasDestinationCall",
            type: "bool",
          },
        ],
        internalType: "struct ILiFi.BridgeData",
        name: "_bridgeData",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "approveTo",
            type: "address",
          },
          {
            internalType: "address",
            name: "sendingAssetId",
            type: "address",
          },
          {
            internalType: "address",
            name: "receivingAssetId",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "fromAmount",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "bool",
            name: "requiresDeposit",
            type: "bool",
          },
        ],
        internalType: "struct LibSwap.SwapData[]",
        name: "_swapData",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "address",
            name: "callTo",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "relayerFee",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "slippageTol",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "delegate",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "destChainDomainId",
            type: "uint32",
          },
        ],
        internalType: "struct AmarokData",
        name: "_stargateData",
        type: "tuple",
      },
    ],
    name: "renewSubscriptionByBridgeWithAmarok",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061158e806100206000396000f3fe6080604052600436106100295760003560e01c80631ef5f4571461002e578063fb8d02bb14610043575b600080fd5b61004161003c366004610c77565b610056565b005b610041610051366004610d61565b6100f4565b468952604080516020601f84018190048102820181019092528281526100a0918b9133918891908790879081908401838280828437600092019190915250508b5191506101259050565b85528851600090815260008051602061153983398151915260209081526040808320828d01518452825280832033845290915290206001018390556100e989338a8a8a8a610148565b505050505050505050565b6100fe86866102e2565b61010d86868360000151610375565b815261011d868686868686610148565b505050505050565b606061013c82610137888888886103dc565b61043e565b90505b95945050505050565b6101538686866104c3565b81156101cf5760405163123cc11760e01b8152731231deb6f5749ef6ce6943a275a1d3e7486f4eae9063123cc117903490610198908890889088908890600401611012565b6000604051808303818588803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b505050505061023d565b60405163b506907160e01b8152731231deb6f5749ef6ce6943a275a1d3e7486f4eae9063b506907190349061020a9088908690600401611143565b6000604051808303818588803b15801561022357600080fd5b505af1158015610237573d6000803e3d6000fd5b50505050505b6040805160808101825287518152602080890151908201528782015160ff168183015260608089015190820152905161029f9190815181526020808301519082015260408083015160ff16908201526060918201519181019190915260800190565b604051908190038120906001600160a01b038716907f74665889c58d4a06a4a4a8e0bb02761d35a66416e20acbd510a34b1cf52e53aa90600090a3505050505050565b42600080516020611539833981519152835160009081526020918252604080822083870151835283528082206001600160a01b03861683529092522054106103715760405162461bcd60e51b815260206004820152601b60248201527f537562736372697074696f6e206973206e6f742065787069726564000000000060448201526064015b60405180910390fd5b5050565b60606103d4826101378587602001516040805160248101929092526001600160a01b03929092166044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663bc0dee8360e01b17905290565b949350505050565b6040516060906309253c4960e31b908190610401908890889088908890602401611168565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915050949350505050565b60606000806000808680602001905181019061045a9190611230565b935093509350935085836001855161047291906113cb565b81518110610482576104826113e2565b602002602001015160a00181905250838383836040516020016104a894939291906113f8565b60405160208183030381529060405294505050505092915050565b6060830151600080516020611539833981519152845160009081526020918252604080822083880151835283528082203383529092522060020154101561053e5760405162461bcd60e51b815260206004820152600f60248201526e082dadeeadce840e8dede40d0d2ced608b1b6044820152606401610368565b60808301516040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b15801561058457600080fd5b505afa158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906114ea565b608085015160c08401516040516323b872dd60e01b81526001600160a01b038781166004830152306024830152604482019290925292935016906323b872dd90606401602060405180830381600087803b15801561061957600080fd5b505af115801561062d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106519190611503565b50600080516020611539833981519152845160009081526020918252604080822083880151835283528082206001600160a01b0387168352909252206001015461069b9042611520565b600080516020611539833981519152855160009081526020918252604080822083890151835283528082206001600160a01b0388811684529352908190209290925560c0840151608087015192516370a0823160e01b81523060048201529092849216906370a082319060240160206040518083038186803b15801561072057600080fd5b505afa158015610734573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075891906114ea565b61076291906113cb565b10156107a25760405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606401610368565b608084015160c083015160405163095ea7b360e01b8152731231deb6f5749ef6ce6943a275a1d3e7486f4eae600482015260248101919091526001600160a01b039091169063095ea7b390604401602060405180830381600087803b15801561080a57600080fd5b505af115801561081e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108429190611503565b5050505050565b634e487b7160e01b600052604160045260246000fd5b60405161014081016001600160401b038111828210171561088257610882610849565b60405290565b60405160c081016001600160401b038111828210171561088257610882610849565b60405160e081016001600160401b038111828210171561088257610882610849565b604051601f8201601f191681016001600160401b03811182821017156108f4576108f4610849565b604052919050565b6001600160a01b038116811461091157600080fd5b50565b600060a0828403121561092657600080fd5b60405160a081018181106001600160401b038211171561094857610948610849565b80604052508091508235815260208301356020820152604083013560ff8116811461097257600080fd5b604082015260608381013590820152608083013561098f816108fc565b6080919091015292915050565b60006001600160401b038211156109b5576109b5610849565b50601f01601f191660200190565b60006109d66109d18461099c565b6108cc565b90508281528383830111156109ea57600080fd5b828260208301376000602084830101529392505050565b600082601f830112610a1257600080fd5b610a21838335602085016109c3565b9392505050565b8035610a33816108fc565b919050565b801515811461091157600080fd5b8035610a3381610a38565b60006101408284031215610a6457600080fd5b610a6c61085f565b90508135815260208201356001600160401b0380821115610a8c57600080fd5b610a9885838601610a01565b60208401526040840135915080821115610ab157600080fd5b50610abe84828501610a01565b604083015250610ad060608301610a28565b6060820152610ae160808301610a28565b6080820152610af260a08301610a28565b60a082015260c082013560c082015260e082013560e0820152610100610b19818401610a46565b90820152610120610b2b838201610a46565b9082015292915050565b60008083601f840112610b4757600080fd5b5081356001600160401b03811115610b5e57600080fd5b6020830191508360208260051b8501011115610b7957600080fd5b9250929050565b803563ffffffff81168114610a3357600080fd5b600060c08284031215610ba657600080fd5b610bae610888565b905081356001600160401b03811115610bc657600080fd5b8201601f81018413610bd757600080fd5b610be6848235602084016109c3565b825250610bf560208301610a28565b60208201526040820135604082015260608201356060820152610c1a60808301610a28565b6080820152610c2b60a08301610b80565b60a082015292915050565b60008083601f840112610c4857600080fd5b5081356001600160401b03811115610c5f57600080fd5b602083019150836020828501011115610b7957600080fd5b60008060008060008060008060006101608a8c031215610c9657600080fd5b610ca08b8b610914565b985060a08a01356001600160401b0380821115610cbc57600080fd5b610cc88d838e01610a51565b995060c08c0135915080821115610cde57600080fd5b610cea8d838e01610b35565b909950975060e08c0135915080821115610d0357600080fd5b610d0f8d838e01610b94565b9650610d1e6101008d01610a28565b95506101208c013594506101408c0135915080821115610d3d57600080fd5b50610d4a8c828d01610c36565b915080935050809150509295985092959850929598565b6000806000806000806101208789031215610d7b57600080fd5b610d858888610914565b955060a0870135610d95816108fc565b945060c08701356001600160401b0380821115610db157600080fd5b610dbd8a838b01610a51565b955060e0890135915080821115610dd357600080fd5b610ddf8a838b01610b35565b9095509350610100890135915080821115610df957600080fd5b50610e0689828a01610b94565b9150509295509295509295565b60005b83811015610e2e578181015183820152602001610e16565b83811115610e3d576000848401525b50505050565b60008151808452610e5b816020860160208601610e13565b601f01601f19169290920160200192915050565b6000610140825184526020830151816020860152610e8f82860182610e43565b91505060408301518482036040860152610ea98282610e43565b9150506060830151610ec660608601826001600160a01b03169052565b506080830151610ee160808601826001600160a01b03169052565b5060a0830151610efc60a08601826001600160a01b03169052565b5060c083015160c085015260e083015160e085015261010080840151610f258287018215159052565b50506101209283015115159390920192909252919050565b6000808335601e19843603018112610f5457600080fd5b83016020810192503590506001600160401b03811115610f7357600080fd5b803603831315610b7957600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6000815160c08452610fc060c0850182610e43565b9050602083015160018060a01b0380821660208701526040850151604087015260608501516060870152806080860151166080870152505063ffffffff60a08401511660a08501528091505092915050565b6000606080835261102581840188610e6f565b602084820381860152818783528183019050818860051b840101896000805b8b81101561111f57868403601f190185528235368e900360de19018112611069578283fd5b8d0160e08135611078816108fc565b6001600160a01b0390811687528289013590611093826108fc565b168689015260406110a5838201610a28565b6001600160a01b0316908701526110bd828b01610a28565b6001600160a01b03168a8701526080828101359087015260a06110e281840184610f3d565b83838a01526110f4848a018284610f82565b935050505060c0611106818401610a46565b1515960195909552509385019391850191600101611044565b50505086810360408801526111348189610fab565b9b9a5050505050505050505050565b6040815260006111566040830185610e6f565b828103602084015261013f8185610fab565b6000610100865183526020870151602084015260ff604088015116604084015260608701516060840152608087015160018060a01b03808216608086015280881660a086015280871660c086015250508060e08401526111ca81840185610e43565b979650505050505050565b8051610a33816108fc565b600082601f8301126111f157600080fd5b81516111ff6109d18261099c565b81815284602083860101111561121457600080fd5b6103d4826020830160208701610e13565b8051610a3381610a38565b6000806000806080858703121561124657600080fd5b8451935060208501516001600160401b038082111561126457600080fd5b818701915087601f83011261127857600080fd5b81518181111561128a5761128a610849565b61129960208260051b016108cc565b8082825260208201915060208360051b86010192508a8311156112bb57600080fd5b602085015b83811015611387578051858111156112d757600080fd5b860160e0818e03601f190112156112ed57600080fd5b6112f56108aa565b611301602083016111d5565b815261130f604083016111d5565b6020820152611320606083016111d5565b6040820152611331608083016111d5565b606082015260a0820151608082015260c08201518781111561135257600080fd5b6113618f6020838601016111e0565b60a08301525061137360e08301611225565b60c0820152845250602092830192016112c0565b50809750505050505061139c604086016111d5565b91506113aa606086016111d5565b905092959194509250565b634e487b7160e01b600052601160045260246000fd5b6000828210156113dd576113dd6113b5565b500390565b634e487b7160e01b600052603260045260246000fd5b600060808083018784526020828186015281885180845260a093508387019150838160051b880101838b0160005b838110156114b857898303609f19018552815180516001600160a01b039081168552878201518116888601526040808301518216908601526060808301519091169085015288810151898501528781015160e08986018190529061148c82870182610e43565b91505060c08083015192506114a48187018415159052565b509587019593505090850190600101611426565b50506001600160a01b038a16604089015295506114d6945050505050565b6001600160a01b038316606083015261013f565b6000602082840312156114fc57600080fd5b5051919050565b60006020828403121561151557600080fd5b8151610a2181610a38565b60008219821115611533576115336113b5565b50019056feaac8aff6168086bf0ebba85245f7ec7b3821eb78fcc9bef2b675e60b9384ed29a264697066735822122001f82d5ec8e6ac731ca988d54ab194e50e14d313cd49697c801e51da636a497c64736f6c63430008090033";

type AmarokFacetConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AmarokFacetConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AmarokFacet__factory extends ContractFactory {
  constructor(...args: AmarokFacetConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AmarokFacet> {
    return super.deploy(overrides || {}) as Promise<AmarokFacet>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): AmarokFacet {
    return super.attach(address) as AmarokFacet;
  }
  override connect(signer: Signer): AmarokFacet__factory {
    return super.connect(signer) as AmarokFacet__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AmarokFacetInterface {
    return new utils.Interface(_abi) as AmarokFacetInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AmarokFacet {
    return new Contract(address, _abi, signerOrProvider) as AmarokFacet;
  }
}
