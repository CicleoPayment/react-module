/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CicleoTestBridge,
  CicleoTestBridgeInterface,
} from "../../../contracts/TestBridge.sol/CicleoTestBridge";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_token",
        type: "address",
      },
    ],
    name: "setToken",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_testValue",
        type: "uint256",
      },
    ],
    name: "test",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "testValue",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bb806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063144fa6d71461005157806329e99f07146100835780638af5de7214610096578063fc0c546a146100b2575b600080fd5b61008161005f366004610201565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b005b610081610091366004610231565b6100dd565b61009f60005481565b6040519081526020015b60405180910390f35b6001546100c5906001600160a01b031681565b6040516001600160a01b0390911681526020016100a9565b60008181556001546040516370a0823160e01b81523360048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561012557600080fd5b505afa158015610139573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061015d919061024a565b6001546040516323b872dd60e01b815233600482015273fa5ff1747df46e146a8cd85d6bd9c115abf819cd6024820152604481018390529192506001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156101c457600080fd5b505af11580156101d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101fc9190610263565b505050565b60006020828403121561021357600080fd5b81356001600160a01b038116811461022a57600080fd5b9392505050565b60006020828403121561024357600080fd5b5035919050565b60006020828403121561025c57600080fd5b5051919050565b60006020828403121561027557600080fd5b8151801515811461022a57600080fdfea2646970667358221220e24e483e60cb9ac1997c9ef807cf68bff2a9e59ffcf0fc4c7140044884ea6a6f64736f6c63430008090033";

type CicleoTestBridgeConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CicleoTestBridgeConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CicleoTestBridge__factory extends ContractFactory {
  constructor(...args: CicleoTestBridgeConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CicleoTestBridge> {
    return super.deploy(overrides || {}) as Promise<CicleoTestBridge>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CicleoTestBridge {
    return super.attach(address) as CicleoTestBridge;
  }
  override connect(signer: Signer): CicleoTestBridge__factory {
    return super.connect(signer) as CicleoTestBridge__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CicleoTestBridgeInterface {
    return new utils.Interface(_abi) as CicleoTestBridgeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CicleoTestBridge {
    return new Contract(address, _abi, signerOrProvider) as CicleoTestBridge;
  }
}
