/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  CicleoSubscriptionRouter,
  CicleoSubscriptionRouterInterface,
} from "../../../contracts/SubscriptionRouter.sol/CicleoSubscriptionRouter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "factory",
    outputs: [
      {
        internalType: "contract CicleoSubscriptionFactory",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "getSubscriptionManager",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "_address",
            type: "address",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "string",
            name: "tokenSymbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "tokenDecimals",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "activeSubscriptionCount",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "treasury",
            type: "address",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "price",
                type: "uint256",
              },
              {
                internalType: "bool",
                name: "isActive",
                type: "bool",
              },
              {
                internalType: "string",
                name: "name",
                type: "string",
              },
            ],
            internalType: "struct SubscriptionStruct[]",
            name: "subscriptions",
            type: "tuple[]",
          },
          {
            internalType: "address[]",
            name: "owners",
            type: "address[]",
          },
        ],
        internalType: "struct SubscriptionManagerStruct",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getSubscriptionsManager",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "name",
            type: "string",
          },
          {
            internalType: "string",
            name: "tokenSymbol",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "activeSubscriptionCount",
            type: "uint256",
          },
        ],
        internalType: "struct MinimifiedSubscriptionManagerStruct[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "security",
    outputs: [
      {
        internalType: "contract CicleoSubscriptionSecurity",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_factory",
        type: "address",
      },
    ],
    name: "setFactory",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_security",
        type: "address",
      },
    ],
    name: "setSecurity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061151f806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c8063963b701d11610066578063963b701d14610114578063a1e01cc414610134578063c45a015514610154578063c4d66de814610167578063f2fde38b1461017a57600080fd5b806352228054146100a357806354879918146100b85780635bb47808146100e8578063715018a6146100fb5780638da5cb5b14610103575b600080fd5b6100b66100b1366004610dc0565b61018d565b005b6065546100cb906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66100f6366004610dc0565b6101b7565b6100b66101e1565b6033546001600160a01b03166100cb565b610127610122366004610dc0565b6101f5565b6040516100df9190610e40565b610147610142366004610edc565b610571565b6040516100df9190610fb0565b6066546100cb906001600160a01b031681565b6100b6610175366004610dc0565b610a69565b6100b6610188366004610dc0565b610c2c565b610195610ca5565b606580546001600160a01b0319166001600160a01b0392909216919091179055565b6101bf610ca5565b606680546001600160a01b0319166001600160a01b0392909216919091179055565b6101e9610ca5565b6101f36000610cff565b565b606554604051630a441df160e21b81526001600160a01b03838116600483015260609260009291169063291077c49060240160006040518083038186803b15801561023f57600080fd5b505afa158015610253573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027b9190810190611138565b90506000815167ffffffffffffffff811115610299576102996110a4565b6040519080825280602002602001820160405280156102f557816020015b6102e26040518060800160405280600081526020016060815260200160608152602001600081525090565b8152602001906001900390816102b75790505b50905060005b82518110156105695760665483516000916001600160a01b03169063fac333ac9086908590811061032e5761032e6111ce565b60200260200101516040518263ffffffff1660e01b815260040161035491815260200190565b60206040518083038186803b15801561036c57600080fd5b505afa158015610380573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a491906111e4565b905060405180608001604052808584815181106103c3576103c36111ce565b60200260200101518152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b15801561040957600080fd5b505afa15801561041d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610445919081019061126d565b8152602001826001600160a01b0316637b61c3206040518163ffffffff1660e01b815260040160006040518083038186803b15801561048357600080fd5b505afa158015610497573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104bf919081019061126d565b8152602001826001600160a01b031663cfe7942e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104fd57600080fd5b505afa158015610511573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053591906112a2565b81525083838151811061054a5761054a6111ce565b6020026020010181905250508080610561906112bb565b9150506102fb565b509392505050565b6105e26040518061014001604052806000815260200160006001600160a01b031681526020016060815260200160006001600160a01b0316815260200160608152602001600081526020016000815260200160006001600160a01b0316815260200160608152602001606081525090565b606654604051633eb0cceb60e21b8152600481018490526000916001600160a01b03169063fac333ac9060240160206040518083038186803b15801561062757600080fd5b505afa15801561063b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065f91906111e4565b9050604051806101400160405280848152602001826001600160a01b03168152602001826001600160a01b03166306fdde036040518163ffffffff1660e01b815260040160006040518083038186803b1580156106bb57600080fd5b505afa1580156106cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f7919081019061126d565b8152602001826001600160a01b0316639d76ea586040518163ffffffff1660e01b815260040160206040518083038186803b15801561073557600080fd5b505afa158015610749573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076d91906111e4565b6001600160a01b03168152602001826001600160a01b0316637b61c3206040518163ffffffff1660e01b815260040160006040518083038186803b1580156107b457600080fd5b505afa1580156107c8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107f0919081019061126d565b8152602001826001600160a01b0316633b97e8566040518163ffffffff1660e01b815260040160206040518083038186803b15801561082e57600080fd5b505afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086691906112e4565b60ff168152602001826001600160a01b031663cfe7942e6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108a757600080fd5b505afa1580156108bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108df91906112a2565b8152602001826001600160a01b03166361d027b36040518163ffffffff1660e01b815260040160206040518083038186803b15801561091d57600080fd5b505afa158015610931573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095591906111e4565b6001600160a01b03168152602001826001600160a01b0316633b47a9ac6040518163ffffffff1660e01b815260040160006040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d89190810190611307565b815260655460405163197ed28f60e31b8152600481018790526020909201916001600160a01b039091169063cbf694789060240160006040518083038186803b158015610a2457600080fd5b505afa158015610a38573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a60919081019061140f565b90529392505050565b600054610100900460ff1615808015610a895750600054600160ff909116105b80610aa35750303b158015610aa3575060005460ff166001145b610b0b5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610b2e576000805461ff0019166101001790555b610b36610d51565b606680546001600160a01b0319166001600160a01b03841690811790915560408051630a90f32360e31b81529051635487991891600480820192602092909190829003018186803b158015610b8a57600080fd5b505afa158015610b9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc291906111e4565b606580546001600160a01b0319166001600160a01b03929092169190911790558015610c28576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b610c34610ca5565b6001600160a01b038116610c995760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610b02565b610ca281610cff565b50565b6033546001600160a01b031633146101f35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610b02565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610d785760405162461bcd60e51b8152600401610b029061149e565b6101f3600054610100900460ff16610da25760405162461bcd60e51b8152600401610b029061149e565b6101f333610cff565b6001600160a01b0381168114610ca257600080fd5b600060208284031215610dd257600080fd5b8135610ddd81610dab565b9392505050565b60005b83811015610dff578181015183820152602001610de7565b83811115610e0e576000848401525b50505050565b60008151808452610e2c816020860160208601610de4565b601f01601f19169290920160200192915050565b60006020808301818452808551808352604092508286019150828160051b87010184880160005b83811015610ece57603f19898403018552815160808151855288820151818a870152610e9582870182610e14565b9150508782015185820389870152610ead8282610e14565b60609384015196909301959095525094870194925090860190600101610e67565b509098975050505050505050565b600060208284031215610eee57600080fd5b5035919050565b600081518084526020808501808196508360051b8101915082860160005b85811015610f5f57828403895281518051855285810151151586860152604090810151606091860182905290610f4b81870183610e14565b9a87019a9550505090840190600101610f13565b5091979650505050505050565b600081518084526020808501945080840160005b83811015610fa55781516001600160a01b031687529582019590820190600101610f80565b509495945050505050565b602081528151602082015260006020830151610fd760408401826001600160a01b03169052565b506040830151610140806060850152610ff4610160850183610e14565b9150606085015161101060808601826001600160a01b03169052565b506080850151601f19808685030160a087015261102d8483610e14565b935060a087015160c087015260c087015160e087015260e08701519150610100611061818801846001600160a01b03169052565b8088015192505061012081878603018188015261107e8584610ef5565b90880151878203909201848801529350905061109a8382610f6c565b9695505050505050565b634e487b7160e01b600052604160045260246000fd5b6040516060810167ffffffffffffffff811182821017156110dd576110dd6110a4565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561110c5761110c6110a4565b604052919050565b600067ffffffffffffffff82111561112e5761112e6110a4565b5060051b60200190565b6000602080838503121561114b57600080fd5b825167ffffffffffffffff81111561116257600080fd5b8301601f8101851361117357600080fd5b805161118661118182611114565b6110e3565b81815260059190911b820183019083810190878311156111a557600080fd5b928401925b828410156111c3578351825292840192908401906111aa565b979650505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156111f657600080fd5b8151610ddd81610dab565b600082601f83011261121257600080fd5b815167ffffffffffffffff81111561122c5761122c6110a4565b61123f601f8201601f19166020016110e3565b81815284602083860101111561125457600080fd5b611265826020830160208701610de4565b949350505050565b60006020828403121561127f57600080fd5b815167ffffffffffffffff81111561129657600080fd5b61126584828501611201565b6000602082840312156112b457600080fd5b5051919050565b60006000198214156112dd57634e487b7160e01b600052601160045260246000fd5b5060010190565b6000602082840312156112f657600080fd5b815160ff81168114610ddd57600080fd5b6000602080838503121561131a57600080fd5b825167ffffffffffffffff8082111561133257600080fd5b818501915085601f83011261134657600080fd5b815161135461118182611114565b81815260059190911b8301840190848101908883111561137357600080fd5b8585015b838110156114025780518581111561138f5760008081fd5b86016060818c03601f19018113156113a75760008081fd5b6113af6110ba565b89830151815260408084015180151581146113ca5760008081fd5b828c01529183015191888311156113e15760008081fd5b6113ef8e8c85870101611201565b9082015285525050918601918601611377565b5098975050505050505050565b6000602080838503121561142257600080fd5b825167ffffffffffffffff81111561143957600080fd5b8301601f8101851361144a57600080fd5b805161145861118182611114565b81815260059190911b8201830190838101908783111561147757600080fd5b928401925b828410156111c357835161148f81610dab565b8252928401929084019061147c565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220be3d8a042e2a27e9b1e41c17056690ae78f46606896f7f2fa25e2331ce87e6a664736f6c63430008090033";

type CicleoSubscriptionRouterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CicleoSubscriptionRouterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CicleoSubscriptionRouter__factory extends ContractFactory {
  constructor(...args: CicleoSubscriptionRouterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<CicleoSubscriptionRouter> {
    return super.deploy(overrides || {}) as Promise<CicleoSubscriptionRouter>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): CicleoSubscriptionRouter {
    return super.attach(address) as CicleoSubscriptionRouter;
  }
  override connect(signer: Signer): CicleoSubscriptionRouter__factory {
    return super.connect(signer) as CicleoSubscriptionRouter__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CicleoSubscriptionRouterInterface {
    return new utils.Interface(_abi) as CicleoSubscriptionRouterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): CicleoSubscriptionRouter {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as CicleoSubscriptionRouter;
  }
}
