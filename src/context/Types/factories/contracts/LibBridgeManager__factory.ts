/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  LibBridgeManager,
  LibBridgeManagerInterface,
} from "../../contracts/LibBridgeManager";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "subscriptionManagerId",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "subscriptionId",
            type: "uint8",
          },
          {
            internalType: "uint256",
            name: "priceInSubToken",
            type: "uint256",
          },
          {
            internalType: "contract IERC20",
            name: "token",
            type: "IERC20",
          },
        ],
        internalType: "struct PaymentParameters",
        name: "paymentParams",
        type: "tuple",
      },
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        internalType: "address",
        name: "referral",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "getSubscribeDestinationCalldata",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x61038661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063dfac660c1461003a575b600080fd5b61004d6100483660046101b9565b610063565b60405161005a91906102c9565b60405180910390f35b6040516060906309253c4960e31b9081906100889088908890889088906024016102e3565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152915050949350505050565b634e487b7160e01b600052604160045260246000fd5b60405160a0810167ffffffffffffffff811182821017156100fe576100fe6100c5565b60405290565b6001600160a01b038116811461011957600080fd5b50565b803561012781610104565b919050565b600082601f83011261013d57600080fd5b813567ffffffffffffffff80821115610158576101586100c5565b604051601f8301601f19908116603f01168101908282118183101715610180576101806100c5565b8160405283815286602085880101111561019957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000808486036101008112156101d157600080fd5b60a08112156101df57600080fd5b506101e86100db565b8535815260208601356020820152604086013560ff8116811461020a57600080fd5b604082015260608681013590820152608086013561022781610104565b6080820152935061023a60a0860161011c565b925061024860c0860161011c565b915060e085013567ffffffffffffffff81111561026457600080fd5b6102708782880161012c565b91505092959194509250565b6000815180845260005b818110156102a257602081850181015186830182015201610286565b818111156102b4576000602083870101525b50601f01601f19169290920160200192915050565b6020815260006102dc602083018461027c565b9392505050565b6000610100865183526020870151602084015260ff604088015116604084015260608701516060840152608087015160018060a01b03808216608086015280881660a086015280871660c086015250508060e08401526103458184018561027c565b97965050505050505056fea2646970667358221220e5e082b0c7637f63cbf7fe5a1daba3ba63d8596f6001a5589917edc08494e57364736f6c63430008090033";

type LibBridgeManagerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LibBridgeManagerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LibBridgeManager__factory extends ContractFactory {
  constructor(...args: LibBridgeManagerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<LibBridgeManager> {
    return super.deploy(overrides || {}) as Promise<LibBridgeManager>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): LibBridgeManager {
    return super.attach(address) as LibBridgeManager;
  }
  override connect(signer: Signer): LibBridgeManager__factory {
    return super.connect(signer) as LibBridgeManager__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LibBridgeManagerInterface {
    return new utils.Interface(_abi) as LibBridgeManagerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LibBridgeManager {
    return new Contract(address, _abi, signerOrProvider) as LibBridgeManager;
  }
}
